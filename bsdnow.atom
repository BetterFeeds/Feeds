<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:smi="https://www.betterfeeds.org/series-media-info/1" xmlns:media="http://search.yahoo.com/mrss/" xmlns:psc="http://podlove.org/simple-chapters" xml:lang="en-us">
    <title>BSD Now</title>
    <subtitle>A weekly show covering the latest developments in the world of the BSD family of operating systems. News, Tutorials and Interviews for new users and long time developers alike.</subtitle>
    <icon>http://www.jupiterbroadcasting.com/images/bsdnow-badge.jpg</icon>
    <link href="http://www.bsdnow.tv/" rel="alternate" type="text/html"/>
    <link href="https://feeds.betterfeeds.org/bsdnow.atom" rel="first" type="application/atom+xml; charset=utf-8"/>
    <link href="https://feeds.betterfeeds.org/bsdnow/bsdnow-2013-09.atom" rel="last" type="application/atom+xml; charset=utf-8"/>
    <link href="https://itunes.apple.com/us/podcast/bsd-now-mp3/id701045710" rel="archives" type="text/html" title="iTunes - Audio"/>
    <link href="https://itunes.apple.com/cn/podcast/bsd-now-hd/id850665429" rel="archives" type="text/html" title="iTunes - Video"/>
    <link href="https://www.youtube.com/user/jupiterbroadcasting/videos" rel="archives" type="text/html" title="YouTube"/>
    <link href="http://feeds.feedburner.com/BsdNowMp3" rel="archives" type="application/rss+xml" title="BSD Now MP3 Audio"/>
    <link href="http://feeds.feedburner.com/BsdNowOgg" rel="archives" type="application/rss+xml" title="BSD Now OGG Audio"/>
    <link href="http://feeds.feedburner.com/BsdNowMobile" rel="archives" type="application/rss+xml" title="BSD Now SD Video"/>
    <link href="http://feeds.feedburner.com/BsdNowHd" rel="archives" type="application/rss+xml" title="BSD Now HD Video"/>
    <link href="http://bitlove.org/jupiterbroadcasting/bsdnowhd/feed" rel="archives" type="application/rss+xml" title="BSD Now HD Video (BitTorrent)"/>
    <link href="https://feeds.betterfeeds.org/bsdnow.atom" rel="self" type="application/atom+xml; charset=utf-8" title="BSD Now"/>
    <link href="https://feeds.betterfeeds.org/bsdnow/bsdnow-2017-02.atom" rel="next" type="application/atom+xml; charset=utf-8"/>
    <id>http://www.bsdnow.tv/</id>
    <updated>2017-03-15T07:45:00Z</updated>
    <smi:sequential>false</smi:sequential>
    <author>
        <name>Allan Jude</name>
        <email>allan@jupiterbroadcasting.com</email>
        <uri>https://twitter.com/allanjude</uri>
    </author>
    <author>
        <name>Kris Moore</name>
        <email>kris@pcbsd.org</email>
        <uri>https://twitter.com/pcbsdkris</uri>
    </author>
    <entry>
        <title>Getting Steamy Here</title>
        <smi:episode>183</smi:episode>
        <link rel="alternate" type="text/html" href="http://www.bsdnow.tv/episodes/2017_03_01-getting_steamy_here"/>
        <id>http://www.bsdnow.tv/episodes/2017_03_01-getting_steamy_here</id>
        <published>2017-02-28T22:25:18-08:00</published>
        <updated>2017-03-15T07:40:00Z</updated>
        <link length="34238266" href="http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/jnite/bsd-0183.mp3" type="audio/mpeg" rel="enclosure"/>
        <media:group>
            <media:content fileSize="34238266" duration="4256" url="http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/jnite/bsd-0183.mp3" type="audio/mpeg" medium="audio" isDefault="true"/>
            <media:content fileSize="55356571" duration="4256" url="http://www.podtrac.com/pts/redirect.ogg/traffic.libsyn.com/jnite/bsd-0183.ogg" type="audio/ogg" medium="audio" isDefault="false"/>
            <media:content fileSize="234541653" duration="4256" url="http://www.podtrac.com/pts/redirect.mp4/201406.jb-dl.cdn.scaleengine.net/bsdnow/2017/bsd-0183-432p.mp4" type="video/mp4" medium="video" isDefault="false"/>
            <media:content fileSize="479349265" duration="4256" url="http://www.podtrac.com/pts/redirect.mp4/201406.jb-dl.cdn.scaleengine.net/bsdnow/2017/bsd-0182.mp4" type="video/mp4" medium="video" isDefault="false"/>
            <media:content fileSize="479349265" duration="4256" url="http://bitlove.org/jupiterbroadcasting/bsdnowhd/bsd-0183.mp4.torrent" type="application/x-bittorrent; enclosed=&quot;video/mp4&quot;" medium="video" isDefault="false"/>
            <media:content fileSize="84164" url="http://www.jupiterbroadcasting.com/wp-content/uploads/2017/02/bsd-0183b-v.jpg" type="image/jpg" medium="image" width="854" height="506"/>
        </media:group>
        <contributor>
            <name>JT</name>
            <uri>https://twitter.com/q5sys</uri>
        </contributor>
        <summary>This week on BSDNow, we have “Weird Unix Things”, “Is it getting Steamy in here?” &amp; an Interview about BSD Sockets API. (Those aren’t all related). It’s going to be a good one, buckle up for your place to B...SD!</summary>
        <content type="html">&lt;h1&gt;Episode 183: Getting Steamy Here&lt;/h1&gt;
&lt;h2&gt;Headlines&lt;/h2&gt;

&lt;h3&gt;&lt;a href="https://www.trueos.org/blog/playonbsd-trueos-getting-steamy-ive-much-wine/"&gt;playonbsd with TrueOS: It’s Getting Steamy in Here and I’ve Had Too Much Wine&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;We’ve done a couple of tutorials in the past on using Steam and Wine with PC-BSD, but now with the addition of playonbsd to the AppCafe library, you have more options than ever before to game on your TrueOS system.  We’re going to have a look today at playonbsd, how it works with TrueOS, and what you can expect if you want to give it a try on your own system.  Let’s dive right in!&lt;/p&gt;
  
  &lt;p&gt;Once playonbsd is installed, go back to your blank desktop, right-click on the wallpaper, and select terminal.  Playonbsd does almost all the configuring for you, but there are still a couple of simple options you’ll want to configure to give yourself the best experience.  In your open terminal, type: playonbsd.  You can also find playonbsd by doing a fast search using Lumina’s built-in search function in the start menu after it’s been installed.  Once opened,  a graphical interface greets us with easy to navigate menus and even does most of the work for you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;A nice graphical UI that hides the complexity of setting up WINE and Steam, and lets you pick select the game you want, and get it setup&lt;/li&gt;
&lt;li&gt;Start gaming quicker, without the headache&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re a PC gamer, you should definitely give playonbsd a try!  You may be surprised at how well it works.  If you want to know ahead of time if your games are well supported or not, head on over to WineHQ and do a search.  Many people have tested and provided feedback and even solutions for potential problems with a large variety of video games. This is a great resource if you run into a glitch or other problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;h3&gt;&lt;a href="https://jvns.ca/blog/2017/02/08/weird-unix-things-cd/"&gt;Weird Unix thing: 'cd //'&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;So why can you do ‘cd //tmp’, and it isn’t the same as ‘cd /tmp’?&lt;/li&gt;
&lt;li&gt;The spec says:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;An implementation may further simplify curpath by removing any trailing &lt;slash&gt; characters that are not also leading &lt;slash&gt; characters, replacing multiple non-leading consecutive &lt;slash&gt; characters with a single &lt;slash&gt;, and replacing three or more leading &lt;slash&gt; characters with a single &lt;slash&gt;. If, as a result of this canonicalization, the curpath variable is null, no further steps shall be taken.&lt;/slash&gt;&lt;/slash&gt;&lt;/slash&gt;&lt;/slash&gt;&lt;/slash&gt;&lt;/slash&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;“So! We can replace “three or more leading / characters with a single slash”. That does not say anything about what to do when there are 2 / characters though, which presumably is why cd //tmp leaves you at //tmp.”&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;A pathname that begins with two successive slashes may be interpreted in an implementation-defined manner&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;So what is it for? Well, the blog did a bit of digging and came up with &lt;a href="http://unix.stackexchange.com/questions/256497/on-what-systems-is-foo-bar-different-from-foo-bar/256569#256569"&gt;this stackoverflow answer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In cygwin and some other systems // is treated as a unix-ified version of \, to access UNC windows file sharing paths like \server\share&lt;/li&gt;
&lt;li&gt;Perforce, the vcs, uses // to denote a path relative to the depot&lt;/li&gt;
&lt;li&gt;It seems to have been used in the path for a bunch of different network file systems, but also for myriad other things&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3&gt;&lt;a href="https://arstechnica.com/apple/2017/02/testing-out-snapshots-in-apples-next-generation-apfs-file-system/"&gt;Testing out snapshots in Apple’s next-generation APFS file system&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Adam Leventhal takes his DTrace hammer to Apple’s new file system to see what is going on&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Back in June, Apple announced its new upcoming file system: APFS, or Apple File System. There was no mention of it in the WWDC keynote, but devotees needed no encouragement. They picked over every scintilla of data from the documentation on Apple’s developer site, extrapolating, interpolating, eager for whatever was about to come. In the WWDC session hall, the crowd buzzed with a nervous energy, eager for the grand unveiling of APFS. I myself badge-swapped my way into the conference just to get that first glimpse of Apple’s first original filesystem in the 30+ years since HFS&lt;/p&gt;
  
  &lt;p&gt;Apple’s presentation didn’t disappoint the hungry crowd. We hoped for a modern filesystem, optimized for next generation hardware, rich with features that have become the norm for data centers and professionals. With APFS, Apple showed a path to meeting those expectations. Dominic Giampaolo and Eric Tamura, leaders of the APFS team, shared performance optimizations, data integrity design, volume management, efficient storage of copied data, and snapshots—arguably the feature of APFS most directly in the user’s control.&lt;/p&gt;
  
  &lt;p&gt;It’s 2017, and Apple already appears to be making good on its promise with the revelation that the forthcoming iOS 10.3 will use APFS. The number of APFS tinkerers using it for their personal data has instantly gone from a few hundred to a few million. Beta users of iOS 10.3 have already made the switch apparently without incident. They have even ascribed unscientifically-significant performance improvements to APFS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Previously Adam had used DTrace to find a new syscall introduced in OS X, fs_snapshot, but he had not dug into how to use it. Now it seems, the time has come&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Learning from XNU and making some educated guesses, I wrote my first C program to create an APFS snapshot. This section has a bit of code, which you can find in &lt;a href="https://github.com/ahl/apfs"&gt;this Github repo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;That just returned “fs_snapshot: Operation not permitted”&lt;/li&gt;
&lt;li&gt;So, being Adam, he used DTrace to figure out what the problem was&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Running this DTrace script in one terminal while running the snapshot program in another shows the code flow through the kernel as the program executes&lt;/p&gt;
  
  &lt;p&gt;In the code flow, the priv&lt;em&gt;check&lt;/em&gt;cred() function jumps out as a good place to continue because of its name, the fact that fs_snapshot calls it directly, and the fact that it returns 1 which corresponds with EPERM, the error we were getting.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Turns out, it just requires some sudo&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;With a little more testing I wrote my own version of Apple's unreleased snapUtil command from the WWDC demo&lt;/p&gt;
  
  &lt;p&gt;We figured out the proper use of the fs&lt;em&gt;snapshot system call and reconstructed the WWDC snapUtil. But all this time an equivalent utility has been lurking on macOS Sierra. If you look in /System/Library/Filesystems/apfs.fs/Contents/Resources/, Apple has included a number of APFS-related utilities, including apfs&lt;/em&gt;snapshot (and, tantalizingly, a tool called hfs_convert).&lt;/p&gt;
  
  &lt;p&gt;Snapshots let you preserve state to later peruse; we can also revert an APFS volume to a previous state to restore its contents. The current APFS semantics around rollback are a little odd. The revert operation succeeds, but it doesn't take effect until the APFS volume is next mounted&lt;/p&gt;
  
  &lt;p&gt;Another reason Apple may not have wanted people messing around with snapshots is that the feature appears to be incomplete. Winding yourself into a state where only a reboot can clear a mounted snapshot is easy, and using snapshots seems to break some of the diskutil APFS output&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;It is interesting to see what you can do with DTrace, as well as to see what a DTrace and ZFS developer things of APFS&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2&gt;Interview - Tom Jones - &lt;a href="mailto:tj@enoti.me"&gt;tj@enoti.me&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Replacing the BSD Sockets API&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2&gt;News Roundup&lt;/h2&gt;

&lt;h3&gt;&lt;a href="https://github.com/eborisch/ethname"&gt;FreeBSD rc.d script to map ethernet device names by MAC address&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Self-contained FreeBSD rc.d script for re-naming devices based on their MAC address. I needed it due to USB Ethernet devices coming up in different orders across OS upgrades.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Copy ethname into /usr/local/etc/rc.d/&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the following to rc.conf:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ethname&lt;em&gt;enable="YES"
  ethname&lt;/em&gt;devices="em0 ue0 ue1" # Replace with desired devices to rename&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create /usr/local/etc/ifmap in the following format: &lt;mac address="" (in="" lower="" case)=""&gt; &lt;desired name=""&gt;&lt;/desired&gt;&lt;/mac&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;01:23:45:67:89:ab eth0
  01:23:45:67:89:ac eth1&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;That's it. Use ifconfig_&lt;name&gt;="" settings in rc.conf with the new names.&lt;/name&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;I know MFSBSD has something like this, but a polished up hybrid of the two should likely be part of the base system if something is not already available&lt;/li&gt;
&lt;li&gt;This would be a great “Junior Job”, if say, a viewer wanted to get started with their first FreeBSD patch&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3&gt;&lt;a href="https://github.com/witchard/mog"&gt;Mog: A different take on the Unix tool cat&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Do you abuse cat to view files?&lt;/li&gt;
&lt;li&gt;Did you know cat is meant for con&lt;em&gt;cat&lt;/em&gt;enating files, meaning: cat part1 part2 part3 &amp;gt; wholething.txt&lt;/li&gt;
&lt;li&gt;mog is a tool for actually viewing files, and it adds quite a few nice features

&lt;ul&gt;
&lt;li&gt;Syntax highlight scripts&lt;/li&gt;
&lt;li&gt;Print a hex dump of binary files&lt;/li&gt;
&lt;li&gt;Show details of image files&lt;/li&gt;
&lt;li&gt;Perform objdump on executables&lt;/li&gt;
&lt;li&gt;List a directory&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;mog reads the $HOME/.mogrc config file which describes a series of operations it can do in an ordered manner. Each operation has a match command and an action command. For each file you give to mog it will test each match command in turn, when one matches it will perform the action. A reasonably useful config file is generated when you first run it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;h3&gt;&lt;a href="https://utcc.utoronto.ca/~cks/space/blog/unix/HowUnixBackspaces"&gt;How Unix erases things when you type a backspace while entering text&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yesterday I mentioned in passing that printing a DEL character doesn't actually erase anything. This raises an interesting question, because when you're typing something into a Unix system and hit your backspace key, Unix sure erases the last character that you entered. So how is it doing that?&lt;/p&gt;
  
  &lt;p&gt;The answer turns out to be basically what you'd expect, although the actual implementation rapidly gets complex. When you hit backspace, the kernel tty line discipline rubs out your previous character by printing (in the simple case) Ctrl-H, a space, and then another Ctrl-H.&lt;/p&gt;
  
  &lt;p&gt;Of course just backing up one character is not always the correct way of erasing input, and that's when it gets complicated for the kernel. To start with we have tabs, because when you (the user) backspace over a tab you want the cursor to jump all the way back, not just move back one space. The kernel has a certain amount of code to work out what column it thinks you're on and then back up an appropriate number of spaces with Ctrl-Hs.&lt;/p&gt;
  
  &lt;p&gt;Then we have the case when you quoted a control character while entering it, eg by typing Ctrl-V Ctrl-H; this causes the kernel to print the Ctrl-H instead of acting on it, and it prints it as the two character sequence ^H. When you hit backspace to erase that, of course you want both (printed) characters to be rubbed out, not just the 'H'. So the kernel needs to keep track of that and rub out two characters instead of just one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Chris then provides an example, from IllumOS, of the kernel trying to deal with multibyte characters&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;FreeBSD also handles backspacing a space specially, because you don't need to actually rub that out with a '\b \b' sequence; you can just print a plain \b. Other kernels don't seem to bother with this optimization. The FreeBSD code for this is in sys/kern/tty&lt;em&gt;ttydisc.c in the ttydisc&lt;/em&gt;rubchar function&lt;/p&gt;
  
  &lt;p&gt;PS: If you want to see the kernel's handling of backspace in action, you usually can't test it at your shell prompt, because you're almost certainly using a shell that supports command line editing and readline and so on. Command line editing requires taking over input processing from the kernel, and so such shells are handling everything themselves. My usual way to see what the kernel is doing is to run 'cat &amp;gt;/dev/null' and then type away.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;And you thought the backspace key would be simple...&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3&gt;&lt;a href="http://www.freshports.org/graphics/wayland/"&gt;FreeBSD ports now have Wayland&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We’ve discussed the pending Wayland work, but we wanted to point you today to the ports which are in mainline FreeBSD ports tree now.&lt;/li&gt;
&lt;li&gt;First of all, (And I was wondering how they would deal with this) it has landed in the “graphics” category, since Wayland is the Anti-X11, putting it in x11/ didn’t make a lot of sense.&lt;/li&gt;
&lt;li&gt;Couple of notes before you start installing new packages and expecting wayland to “just work”&lt;/li&gt;
&lt;li&gt;First, this does require that you have working DRM from the kernel side. You’ll want to grab TrueOS or build from Matt Macy’s FreeBSD branches on GitHub before testing on any kind of modern Intel GPU. Nvidia with modesetting should be supported.&lt;/li&gt;
&lt;li&gt;Next, not all desktops will “just work”. You may need to grab experimental Weston for compositor. KDE / Gnome (And Lumina) and friends will grow Wayland support in the future, so don’t expect to just fire up $whatever and have it all work out of box.&lt;/li&gt;
&lt;li&gt;Feedback is needed! This is brand new functionality for FreeBSD, and the maintainers will want to hear your results. For us on the TrueOS side we are interested as well, since we want to port Lumina over to Wayland soon(ish)&lt;/li&gt;
&lt;li&gt;Happy Experimenting!&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2&gt;Beastie Bits&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freebsdfoundation.org/blog/faces-of-freebsd-2017-joseph-kong/"&gt;Faces of FreeBSD 2017: Joseph Kong&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://opnsense.org/opnsense-17-1-released/"&gt;OPNsense 17.1  “Eclectic Eagle”, based on FreeBSD 11 Released&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.koszek.com/blog/2017/01/28/why-you-should-start-programming-on-unix/"&gt;Why you should start programming on UNIX&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://eradman.com/posts/opensmtpd-filtering.html"&gt;OpenSMTPD Mail Filtering&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2&gt;Feedback/Questions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pastebin.com/89AyGe5F"&gt; Zane - Databases and Jails&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://pastebin.com/Te8sz9id"&gt; Mohammad - USB Install&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://pastebin.com/G2SzahWL"&gt; Chuck - Updating Jails&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://pastebin.com/71ExJLpL"&gt; David - Lumina / LXQt&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;Send questions, comments, show ideas/topics, or stories you want mentioned on the show to &lt;a href="mailto:feedback@bsdnow.tv"&gt;feedback@bsdnow.tv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
        </content>
    </entry>
</feed>
