<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:smi="https://www.betterfeeds.org/series-media-info/1" xmlns:media="http://search.yahoo.com/mrss/" xmlns:psc="http://podlove.org/simple-chapters" xml:lang="en-us">
    <title>BSD Now</title>
    <subtitle>A weekly show covering the latest developments in the world of the BSD family of operating systems. News, Tutorials and Interviews for new users and long time developers alike.</subtitle>
    <icon>http://www.jupiterbroadcasting.com/images/bsdnow-badge.jpg</icon>
    <link href="http://www.bsdnow.tv/" rel="alternate" type="text/html"/>
    <link href="https://itunes.apple.com/us/podcast/bsd-now-mp3/id701045710" rel="archives" type="text/html" title="iTunes - Audio"/>
    <link href="https://itunes.apple.com/cn/podcast/bsd-now-hd/id850665429" rel="archives" type="text/html" title="iTunes - Video"/>
    <link href="https://www.youtube.com/user/jupiterbroadcasting/videos" rel="archives" type="text/html" title="YouTube"/>
    <link href="http://feeds.feedburner.com/BsdNowMp3" rel="archives" type="application/rss+xml" title="BSD Now MP3 Audio"/>
    <link href="http://feeds.feedburner.com/BsdNowOgg" rel="archives" type="application/rss+xml" title="BSD Now OGG Audio"/>
    <link href="http://feeds.feedburner.com/BsdNowMobile" rel="archives" type="application/rss+xml" title="BSD Now SD Video"/>
    <link href="http://feeds.feedburner.com/BsdNowHd" rel="archives" type="application/rss+xml" title="BSD Now HD Video"/>
    <link href="http://bitlove.org/jupiterbroadcasting/bsdnowhd/feed" rel="archives" type="application/rss+xml" title="BSD Now HD Video (BitTorrent)"/>
    <link href="https://feeds.betterfeeds.org/bsdnow.atom" rel="self" type="application/atom+xml; charset=utf-8" title="BSD Now"/>
    <link href="https://feeds.betterfeeds.org/bsdnow/bsdnow-2016-12.atom" rel="next" type="application/atom+xml; charset=utf-8"/>
    <link href="https://feeds.betterfeeds.org/bsdnow.atom" rel="first" type="application/atom+xml; charset=utf-8"/>
    <link href="https://feeds.betterfeeds.org/bsdnow/bsdnow-2013-09.atom" rel="last" type="application/atom+xml; charset=utf-8"/>
    <id>http://www.bsdnow.tv/</id>
    <updated>2017-01-06T06:56:00Z</updated>
    <smi:sequential>false</smi:sequential>
    <author>
        <name>Allan Jude</name>
        <email>allan@jupiterbroadcasting.com</email>
        <uri>https://twitter.com/allanjude</uri>
    </author>
    <author>
        <name>Kris Moore</name>
        <email>kris@pcbsd.org</email>
        <uri>https://twitter.com/pcbsdkris</uri>
    </author>
    <entry>
        <title>How the Dtrace saved Christmas</title>
        <smi:episode>175</smi:episode>
        <link rel="alternate" type="text/html" href="http://www.bsdnow.tv/episodes/2017_1_04-how_dtrace_saved_christmas"/>
        <id>http://www.bsdnow.tv/episodes/2017_1_04-how_dtrace_saved_christmas</id>
        <published>2017-01-05T02:09:22-08:00</published>
        <updated>2017-01-06T06:56:00Z</updated>
        <link length="46981006" href="http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/jnite/bsd-0175.mp3" type="audio/mpeg" rel="enclosure"/>
        <media:group>
            <media:content fileSize="46981006" duration="5849" url="http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/jnite/bsd-0175.mp3" type="audio/mpeg" medium="audio" isDefault="true"/>
            <media:content fileSize="73261773" duration="5849" url="http://www.podtrac.com/pts/redirect.ogg/traffic.libsyn.com/jnite/bsd-0175.ogg" type="audio/ogg" medium="audio" isDefault="false"/>
            <media:content fileSize="341368276" duration="5849" url="http://www.podtrac.com/pts/redirect.mp4/201406.jb-dl.cdn.scaleengine.net/bsdnow/2016/bsd-0175-432p.mp4" type="video/mp4" medium="video" isDefault="false"/>
            <media:content fileSize="658693918" duration="5849" url="http://www.podtrac.com/pts/redirect.mp4/201406.jb-dl.cdn.scaleengine.net/bsdnow/2016/bsd-0175.mp4" type="video/mp4" medium="video" isDefault="false"/>
            <media:content fileSize="658693918" duration="5849" url="http://bitlove.org/jupiterbroadcasting/bsdnowhd/bsd-0175.mp4.torrent" type="application/x-bittorrent; enclosed=&quot;video/mp4&quot;" medium="video" isDefault="false"/>
            <media:content fileSize="88172" url="http://www.jupiterbroadcasting.com/wp-content/uploads/2017/01/bsd-0175-v.jpg" type="image/jpg" medium="image" width="854" height="506"/>
        </media:group>
        <psc:chapters version="1.1">
            <psc:chapter start="00:02:20" title="Headlines"/>
            <psc:chapter start="00:02:20" title="OpenSSL 1.1 new API" href="https://www.mail-archive.com/tech@openbsd.org/msg36437.html"/>
            <psc:chapter start="00:15:05" title="Exfiltration via receive timing" href="http://www.tedunangst.com/flak/post/exfiltration-via-receive-timing"/>
            <psc:chapter start="00:22:05" title="AD: DigitalOcean - Simple Cloud Hosting, Built for Developers" href="http://www.digitalocean.com/" image="http://www.bsdnow.tv/images/2.png"/>
            <psc:chapter start="00:25:05" title="OpenBSD Desktop install" href="https://news.ycombinator.com/item?id=13223351"/>
            <psc:chapter start="00:29:10" title="DTrace saved Christmas" href="https://hackernoon.com/dtrace-at-home-145ba773371e"/>
            <psc:chapter start="00:38:55" title="News Roundup"/>
            <psc:chapter start="00:38:55" title="Security roundup" href="https://functionallyparanoid.com/2016/12/22/say-my-blogs-name/"/>
            <psc:chapter start="00:48:40" title="Open source book: &quot;Producing Open Source Software&quot;" href="http://producingoss.com/en/producingoss.pdf"/>
            <psc:chapter start="00:54:30" title="AD: iXsystems - Enterprise Servers and Storage for Open Source" href="http://www.ixsystems.com/bsdnow/" image="http://www.bsdnow.tv/images/1.png"/>
            <psc:chapter start="00:59:45" title="DTrace Flamegraphs for node.js on FreeBSD" href="http://www.venshare.com/dtrace-flamegraphs-for-freebsd-and-node-js-2/"/>
            <psc:chapter start="01:10:40" title="SSHGuard 2.0 Call for Testing" href="https://sourceforge.net/p/sshguard/mailman/message/35580961/"/>
            <psc:chapter start="01:15:05" title="Beastie Bits"/>
            <psc:chapter start="01:15:05" title="2007 Paper: &quot;Porting the ZFS file system to the FreeBSD operating system&quot;" href="https://2007.asiabsdcon.org/papers/P16-paper.pdf"/>
            <psc:chapter start="01:16:00" title="A Message From the FreeBSD Foundation" href="https://vimeo.com/user60888329"/>
            <psc:chapter start="01:17:10" title="Remembering Roger Faulkner, Unix Champion" href="http://thenewstack.io/remembering-roger-faulkner/"/>
            <psc:chapter start="01:18:00" title="AD: Tarsnap - Online Backups for the Truly Paranoid" href="http://www.tarsnap.com/bsdnow" image="http://www.bsdnow.tv/images/3.png"/>
            <psc:chapter start="01:22:30" title="Feedback/Questions"/>
            <psc:chapter start="01:22:30" title="Peter - TrueOS Network" href="http://pastebin.com/QtyJeHMk"/>
            <psc:chapter start="01:24:50" title="Chris - Remote Desktop" href="http://pastebin.com/ru726VTV"/>
            <psc:chapter start="01:26:30" title="Goetz - Geli on Serial" href="http://pastebin.com/LQZPgF5g"/>
            <psc:chapter start="01:28:35" title="Joe - BGP" href="http://pastebin.com/jFeL8zKX"/>
            <psc:chapter start="01:31:40" title="Alejandro - BSD Router" href="http://pastebin.com/Xq9cbmfn"/>
        </psc:chapters>
        <summary>We've got all sorts of post-holiday goodies to share. New OpenSSL APIs, Dtrace, OpenBSD desktops, a truly paranoid start to your 2017 security &amp; more!</summary>
        <content type="html">&lt;h1&gt;Episode 175: How the Dtrace saved Christmas&lt;/h1&gt;
            &lt;h2&gt;Headlines&lt;/h2&gt;

            &lt;h3&gt;&lt;a href=&quot;https://www.mail-archive.com/tech@openbsd.org/msg36437.html&quot;&gt;OpenSSL 1.1 API migration path, or the lack thereof&lt;/a&gt;&lt;/h3&gt;

            &lt;blockquote&gt;
            &lt;p&gt;As many of you will already be aware, the OpenSSL 1.1.0 release intentionally introduced significant API changes from the previous release. In summary, a large number of data structures that were previously publically visible have been made opaque, with accessor functions being added in order to get and set some of the fields within these now opaque structs. It is worth noting that the use of opaque data structures is generally beneficial for libraries, since changes can be made to these data structures without breaking the ABI. As such, the overall direction of these changes is largely reasonable.&lt;/p&gt;

            &lt;p&gt;However, while API change is generally necessary for progression, in this case it would appear that there is NO transition plan and a complete disregard for the impact that these changes would have on the overall open source ecosystem.&lt;/p&gt;

            &lt;p&gt;So far it seems that the only approach is to place the migration burden onto each and every software project that uses OpenSSL, pushing significant code changes to each project that migrates to OpenSSL 1.1, while maintaining compatibility with the previous API. This is forcing each project to provide their own backwards compatibility shims, which is practically guaranteeing that there will be a proliferation of variable quality implementations; it is almost a certainty that some of these will contain bugs, potentially introducing security issues or memory leaks.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;I think this will be a bigger issue for other operating systems that do not have the flexibility of the ports tree to deliver a newer version of OpenSSL. If a project switches from the old API to the new API, and the OS only provides the older branch of OpenSSL, how can the application work?&lt;/li&gt;
            &lt;li&gt;Of course, this leaves the issue, if application A wants OpenSSL 1.0, and application B only works with OpenSSL 1.1, how does that work?&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;Due to a number of factors, software projects that make use of OpenSSL cannot simply migrate to the 1.1 API and drop support for the 1.0 API - in most cases they will need to continue to support both. Firstly, I am not aware of any platform that has shipped a production release with OpenSSL 1.1 - any software that supported OpenSSL 1.1 only, would effectively be unusable on every platform for the time being. Secondly, the OpenSSL 1.0.2 release is supported until the 31st of December 2019, while OpenSSL 1.1.0 is only supported until the 31st of August 2018 - any LTS style release is clearly going to consider shipping with 1.0.2 as a result.&lt;/p&gt;

            &lt;p&gt;Platforms that are attempting to ship with OpenSSL 1.1 are already encountering significant challenges - for example, Debian currently has 257 packages (out of 518) that do not build against OpenSSL 1.1. There are also hidden gotchas for situations where different libraries are linked against different OpenSSL versions and then share OpenSSL data structures between them - many of these problems will be difficult to detect since they only fail at runtime.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;It will be interesting to see what happens with OpenSSL, and LibreSSL&lt;/li&gt;
            &lt;li&gt;Hopefully, most projects will decide to switch to the cleaner APIs provided by s2n or libtls, although they do not provide the entire functionality of the OpenSSL API.&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=13284648&quot;&gt;Hacker News comments&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h3&gt;&lt;a href=&quot;http://www.tedunangst.com/flak/post/exfiltration-via-receive-timing&quot;&gt;exfiltration via receive timing&lt;/a&gt;&lt;/h3&gt;

            &lt;blockquote&gt;
            &lt;p&gt;Another similar way to create a backchannel but without transmitting anything is to introduce delays in the receiver and measure throughput as observed by the sender. All we need is a protocol with transmission control. Hmmm. Actually, it's easier (and more reliable) to code this up using a plain pipe, but the same principle applies to networked transmissions.&lt;/p&gt;

            &lt;p&gt;For every digit we want to &quot;send&quot; back, we sleep a few seconds, then drain the pipe. We don't care about the data, although if this were a video file or an OS update, we could probably do something useful with it.&lt;/p&gt;

            &lt;p&gt;Continuously fill the pipe with junk data. If (when) we block, calculate the difference between before and after. This is a our secret backchannel data. (The reader and writer use different buffer sizes because on OpenBSD at least, a writer will stay blocked even after a read depending on the space that opens up. Even simple demos have real world considerations.)&lt;/p&gt;

            &lt;p&gt;In this simple example, the secret data (argv) is shared by the processes, but we can see that the writer isn't printing them from its own address space. Nevertheless, it works.&lt;/p&gt;

            &lt;p&gt;Time to add random delays and buffering to firewalls? Probably not.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;An interesting thought experiment that shows just how many ways there are to covertly convey a message&lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h3&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=13223351&quot;&gt;OpenBSD Desktop in about 30 Minutes&lt;/a&gt;&lt;/h3&gt;

            &lt;ul&gt;
            &lt;li&gt;Over at hackernews we have a very non-verbose, but handy guide to getting to a OpenBSD desktop in about 30 minutes!&lt;/li&gt;
            &lt;li&gt;First, the guide will assume you've already installed OpenBSD 6.0, so you'll need to at least be at the shell prompt of your freshly installed system to begin.&lt;/li&gt;
            &lt;li&gt;With that, now its time to do some tuning. Editing some resource limits in login.conf will be our initial task, upping some datasize tunables to 2GB&lt;/li&gt;
            &lt;li&gt;Next up, we will edit some of the default &quot;doas&quot; settings to something a bit more workable for desktop computing&lt;/li&gt;
            &lt;li&gt;Another handy trick, editing your .profile to have your PKG_PATH variables set automatically will make&lt;/li&gt;
            &lt;li&gt;One thing some folks may overlook, but disabling atime can speed disk performance (which you probably don't care about atime on your desktop anyway), so this guide will show you what knobs to tweak in /etc/fstab to do so&lt;/li&gt;
            &lt;li&gt;After some final WPA / Wifi configuration, we then drop to &quot;mere mortal&quot; mode and begin our package installations. In this particular guide, he will be setting up Lumina Desktop (Which yes, it is on OpenBSD)&lt;/li&gt;
            &lt;li&gt;A few small tweaks later for xscreensaver and your xinitrc file, then you are ready to run &quot;startx&quot; and begin your desktop session!&lt;/li&gt;
            &lt;li&gt;All in all, great guide which if you are fast can probably be done in even less than 30 minutes and will result in a rock-solid OpenBSD desktop rocking Lumina none-the-less.&lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h3&gt;&lt;a href=&quot;https://hackernoon.com/dtrace-at-home-145ba773371e&quot;&gt;How DTrace saved Christmas&lt;/a&gt;&lt;/h3&gt;

            &lt;ul&gt;
            &lt;li&gt;Adam Leventhal, one of the co-creators of DTrace, wrote up this post about how he uses DTrace at home, to save Christmas&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;I had been procrastinating making the family holiday card. It was a combination of having a lot on my plate and dreading the formulation of our annual note recapping the year; there were some great moments, but I'm glad I don't have to do 2016 again. It was just before midnight and either I'd make the card that night or leave an empty space on our friends' refrigerators.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;Adobe Illustrator had other ideas: &quot;Unable to set maximum number of files to be opened&quot;&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;I'm not the first person to hit this. The problem seems to have existed since CS6 was released in 2016. None of the solutions were working for me, and — inspired by &lt;a href=&quot;https://medium.com/startup-grind/how-to-start-a-company-with-no-free-time-b70fbe7b918a#.uujdblxc6&quot;&gt;Sara Mauskopf's excellent post&lt;/a&gt; — I was rapidly running out of the time bounds for the project. Enough; I'd just DTrace it.&lt;/p&gt;

            &lt;p&gt;A colleague scoffed the other day, &quot;I mean, how often do you actually use DTrace?&quot; In his mind DTrace was for big systems, critical system, when dollars and lives were at stake. My reply: I use DTrace every day. I can't imagine developing software without DTrace, and I use it when my laptop (not infrequently) does something inexplicable (I'm forever grateful to the Apple team that ported it to Mac OS X)&lt;/p&gt;

            &lt;p&gt;Illustrator is failing on setrlimit(2) and blowing up as result. Let's confirm that it is in fact returning -1:$ sudo dtrace -n 'syscall::setrlimit:return/execname == &quot;Adobe Illustrato&quot;/{ printf(&quot;%d %d&quot;, arg1, errno); }'
            dtrace: description 'syscall::setrlimit:return' matched 1 probe
            CPU     ID                    FUNCTION:NAME
            0    532                 setrlimit:return -1 1&lt;/p&gt;

            &lt;p&gt;There it is. And setrlimit(2) is failing with errno 1 which is EPERM (value too high for non-root user). I already tuned up the files limit pretty high. Let's confirm that it is in fact setting the files limit and check the value to which it's being set. To write this script I looked at the documentation for setrlimit(2) (hooray for man pages!) to determine that the position of the resource parameter (arg0) and the type of the value parameter (struct rlimit). I needed the DTrace copyin() subroutine to grab the structure from the process's address space:
            $ sudo dtrace -n 'syscall::setrlimit:entry/execname == &quot;Adobe Illustrato&quot;/{ this-&amp;gt;r = *(struct rlimit *)copyin(arg1, sizeof (struct rlimit)); printf(&quot;%x %x %x&quot;, arg0, this-&amp;gt;r.rlim_cur, this-&amp;gt;r.rlim_max);  }'&lt;/p&gt;

            &lt;p&gt;dtrace: description 'syscall::setrlimit:entry' matched 1 probe
            CPU     ID                FUNCTION:NAME
            0    531              setrlimit:entry 1008 2800 7fffffffffffffff
            Looking through /usr/include/sys/resource.h we can see that 1008 corresponds to the number of files (RLIMIT&lt;em&gt;NOFILE |
            _RLIMIT&lt;/em&gt;POSIX_FLAG)&lt;/p&gt;

            &lt;p&gt;The quickest solution was to use DTrace again to whack a smaller number into that struct rlimit. Easy:
            $ sudo dtrace -w -n 'syscall::setrlimit:entry/execname == &quot;Adobe Illustrato&quot;/{ this-&amp;gt;i = (rlim&lt;em&gt;t *)alloca(sizeof (rlim&lt;/em&gt;t)); *this-&amp;gt;i = 10000; copyout(this-&amp;gt;i, arg1 + sizeof (rlim_t), sizeof (rlim_t)); }'&lt;/p&gt;

            &lt;p&gt;dtrace: description 'syscall::setrlimit:entry' matched 1 probe
            dtrace: could not enable tracing: Permission denied&lt;/p&gt;

            &lt;p&gt;Oh right. Thank you SIP (System Integrity Protection). This is a new laptop (at least a new motherboard due to some bizarre issue) which probably contributed to Illustrator not working when once it did. Because it's new I haven't yet disabled the part of SIP that prevents you from using DTrace on the kernel or in destructive mode (e.g. copyout()). It's easy enough to disable, but I'm reboot-phobic — I hate having to restart my terminals — so I went to plan B: lldb
            + After using DTrace to get the address of the setrlimit function, Adam used lldb to change the result before it got back to the application:
            (lldb) break set -n _init
            Breakpoint 1: 47 locations.
            (lldb) run
            ...
            (lldb) di -s 0x1006e5b72 -c 1
            0x1006e5b72: callq  0x1011628e0     ; symbol stub for: setrlimit
            (lldb) memory write 0x1006e5b72 0x31 0xc0 0x90 0x90 0x90
            (lldb) di -s 0x1006e5b72 -c 4
            0x1006e5b72: xorl   %eax, %eax
            0x1006e5b74: nop
            0x1006e5b75: nop
            0x1006e5b76: nop&lt;/p&gt;

            &lt;p&gt;Next I just did a process detach and got on with making that holiday card...&lt;/p&gt;

            &lt;p&gt;DTrace was designed for solving hard problems on critical systems, but the need to understand how systems behave exists in development and on consumer systems. Just because you didn't write a program doesn't mean you can't fix it.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;hr&gt;

            &lt;h2&gt;News Roundup&lt;/h2&gt;

            &lt;h3&gt;&lt;a href=&quot;https://functionallyparanoid.com/2016/12/22/say-my-blogs-name/&quot;&gt;Say my Blog's name!&lt;/a&gt;&lt;/h3&gt;

            &lt;ul&gt;
            &lt;li&gt;Brian Everly over at functionally paranoid has a treat for us today. Let us give you a moment to get the tin-foil hats on... Ok, done? Let's begin!&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;He starts off with a look at physical security. He begins by listing your options:&lt;/p&gt;

            &lt;blockquote&gt;
            &lt;ol&gt;
            &lt;li&gt;BIOS passwords – Not something I'm typically impressed with.  Most can be avoided by opening up the machine, closing a jumper and powering it up to reset the NVRAM to factory defaults.  I don't even bother with them.&lt;/li&gt;
            &lt;li&gt;Full disk encryption – This one really rings my bell in a positive way.  If you can kill power to the box (either because the bad actor has to physically steal it and they aren't carrying around a pile of car batteries and an inverter or because you can interrupt power to it some other way), then the disk will be encrypted.  The other beauty of this is that if a drive fails (and they all do eventually) you don't have to have any privacy concerns about chucking it into an electronics recycler (or if you are a bad, bad person, into a landfill) because that data is effectively gibberish without the key (or without a long time to brute force it).&lt;/li&gt;
            &lt;li&gt;Two factor auth for logins – I like this one as well.  I'm not a fan of biometrics because if your fingerprint is compromised (yes, it can happen – &lt;a href=&quot;https://www.washingtonpost.com/news/federal-eye/wp/2015/07/09/hack-of-security-clearance-system-affected-21-5-million-people-federal-authorities-say/&quot;&gt;read&lt;/a&gt; about the department of defense background checks that were extracted by a bad agent – they included fingerprint images) you can't exactly send off for a new finger.  Things like the &lt;a href=&quot;https://www.yubico.com/&quot;&gt;YubiKey&lt;/a&gt; are pretty slick.  They require that you have the physical hardware key as well as the password so unless the bad actor lifted your physical key, they would have a much harder time with physical access to your hardware.&lt;/li&gt;
            &lt;/ol&gt;
            &lt;/blockquote&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;Out of those options, Brian mentions that he uses disk encryption and yubi-key for all his secure network systems.&lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;Next up is network segmentation, in this case the first thing to do is change your admin password for any ISP supplied modem
            / router. He goes on to scare us of javascript attacks being used not against your local machine, but instead non WAN exposed router admin interface. Scary Stuff!&lt;/li&gt;
            &lt;li&gt;For added security, naturally he firewalls the router by plugging in the LAN port to a OpenBSD box which does the 2nd layer of firewall / router protection.&lt;/li&gt;
            &lt;li&gt;What about privacy and browsing? Here's some more of his tips:&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;I use Unbound as my DNS resolver on my local network (with all UDP port 53 traffic redirected to it by pf so I don't have to configure anything on the clients) and then forward the traffic to DNSCrypt Proxy, caching the results in Unbound.  I notice ZERO performance penalty for this and it greatly enhances privacy.  This combination of Unbound and DNSCrypt Proxy works very well together.  You can even have redundancy by having multiple upstream resolvers running on different ports (basically run the DNSCrypt Proxy daemon multiple times pointing to different public resolvers).&lt;/p&gt;

            &lt;p&gt;I also use Firefox exclusively for my web browsing.  By leveraging the tips on &lt;a href=&quot;https://www.privacytools.io/&quot;&gt;this page&lt;/a&gt;, you can lock it down to do a great job of privacy protection.  The fact that your laptop's battery drain rate can be used to fingerprint your browser completely trips me out but hey – that's the world we live in.'&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;What about the cloud you may ask? Well Brian has a nice solution for that as well:&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;I recently decided I would try to live a cloud-free life and I'll give you a bit of a synopsis on it.  I discovered a wonderful Open Source project called &lt;a href=&quot;http://www.freenas.org/&quot;&gt;FreeNAS&lt;/a&gt;.  What this little gem does is allow you to install a FreeBSD/zfs file server appliance on amd64 hardware and have a slick administrative web interface for managing it.  I picked up a nice SuperMicro motherboard and chassis that has 4 hot swap drive bays (and two internal bays that I used to mirror the boot volume on) and am rocking the zfs lifestyle!  (Thanks Alan Jude!)&lt;/p&gt;

            &lt;p&gt;One of the nicest features of the FreeNAS is that it provides the ability to leverage the FreeBSD jail functionality in an easy to use way.  It also has plugins but the security on those is a bit sketchy (old versions of libraries, etc.) so I decided to roll my own.  I created two jails – one to run OwnCloud (yeah, I know about NextCloud and might switch at some point) and the other to run a full SMTP/IMAP email server stack.  I used &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Lets Encrypt&lt;/a&gt; to generate the SSL certificates and made sure I hit an A on &lt;a href=&quot;https://www.ssllabs.com/&quot;&gt;SSLLabs&lt;/a&gt; before I did anything else.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;His post then goes in to talk about Backups and IoT devices, something else you need to consider in this truely paranoid world we are forced to live in. We even get a nice shout-out near the end!&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;Enter &lt;a href=&quot;http://www.tarsnap.com/&quot;&gt;TarSnap&lt;/a&gt; – a company that advertises itself as &quot;Online Backups for the Truly Paranoid&quot;.  It brings a tear to my eye – a kindred spirit!  :-)  Thanks again to Alan Jude and Kris Moore from the &lt;a href=&quot;http://www.bsdnow.tv/&quot;&gt;BSD Now podcast&lt;/a&gt; for turning me onto this company.  It has a very easy command syntax (yes, it isn't a GUI tool – suck it up buttercup, you wanted to learn the shell didn't you?) and even allows you to compile the thing from source if you want to.&quot;&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;We've only covered some of the highlights here, but you really should take a few moments of your time today and read this top to bottom. Lots of good tips here, already thinking how I can secure my home network better.&lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h3&gt;&lt;a href=&quot;http://producingoss.com/en/producingoss.pdf&quot;&gt;The open source book: &quot;Producing Open Source Software&quot;&lt;/a&gt;&lt;/h3&gt;

            &lt;ul&gt;
            &lt;li&gt;&quot;How to Run a Successful Free Software Project&quot; by Karl Fogel&lt;/li&gt;
            &lt;li&gt;9 chapters and over 200 pages of content, plus many appendices&lt;/li&gt;
            &lt;li&gt;Some interesting topics include:

            &lt;ul&gt;
            &lt;li&gt;Choosing a good name&lt;/li&gt;
            &lt;li&gt;version control&lt;/li&gt;
            &lt;li&gt;bug tracking&lt;/li&gt;
            &lt;li&gt;creating developer guidelines&lt;/li&gt;
            &lt;li&gt;setting up communications channels&lt;/li&gt;
            &lt;li&gt;choosing a license (although this guide leans heavily towards the GPL)&lt;/li&gt;
            &lt;li&gt;setting the tone of the project&lt;/li&gt;
            &lt;li&gt;joining or creating a Non-Profit Organization&lt;/li&gt;
            &lt;li&gt;the economics of open source&lt;/li&gt;
            &lt;li&gt;release engineering, packaging, nightly builds, etc&lt;/li&gt;
            &lt;li&gt;how to deal with forks&lt;/li&gt;
            &lt;/ul&gt;&lt;/li&gt;
            &lt;li&gt;A lot of good information packaged into this ebook&lt;/li&gt;
            &lt;li&gt;This work is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License&lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h3&gt;&lt;a href=&quot;http://www.venshare.com/dtrace-flamegraphs-for-freebsd-and-node-js-2/&quot;&gt;DTrace Flamegraphs for node.js on FreeBSD &lt;/a&gt;&lt;/h3&gt;

            &lt;ul&gt;
            &lt;li&gt;One of the coolest tools built on top of DTrace is flamegraphs&lt;/li&gt;
            &lt;li&gt;They are a very accurate, and visual way to see where a program is spending its time, which can tell you why it is slow, or where it could be improved. Further enhancements include off-cpu flame graphs, which tell you when the program is doing nothing, which can also be very useful
            &amp;gt; Recently BSD UNIXes are being acknowledged by the application development community as an interesting operating system to deploy to. This is not surprising given that FreeBSD had jails, the original container system, about 17 years ago and a lot of network focused businesses such as netflix see it as the best way to deliver content. This developer interest has led to hosting providers supporting FreeBSD. e.g. Amazon, Azure, Joyent and you can get a 2 months free instance at Digital Ocean.&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;DTrace is another vital feature for anyone who has had to deal with production issues and has been in FreeBSD since version 9. As of FreeBSD 11 the operating system now contains some great work by Fedor Indutny so you can profile node applications and create flamegraphs of node.js processes without any additional runtime flags or restarting of processes.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;This is one of the most important things about DTrace. Many applications include some debugging functionality, but they require that you stop the application, and start it again in debugging mode. Some even require that you recompile the application in debugging mode.&lt;/li&gt;
            &lt;li&gt;Being able to attach DTrace to an application, while it is under load, while the problem is actively happening, can be critical to figuring out what is going on.&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;In order to configure your FreeBSD instance to utilize this feature make the following changes to the configuration of the server.&lt;/p&gt;

            &lt;ul&gt;
            &lt;li&gt;Load the DTrace module at boot&lt;/li&gt;
            &lt;li&gt;Increase some DTrace limits&lt;/li&gt;
            &lt;li&gt;Install node with the optional DTrace feature compiled in&lt;/li&gt;
            &lt;li&gt;Follow the generic &lt;a href=&quot;https://nodejs.org/en/blog/uncategorized/profiling-node-js/&quot;&gt;node.js flamegraph tutorial&lt;/a&gt;
            &amp;gt; I hope you find this article useful. The ability to look at a runtime in this manor has saved me twice this year and I hope it will save you in the future too. My next post on freeBSD and node.js will be looking at some scenarios on utilising the ZFS features.&lt;/li&gt;
            &lt;/ul&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;Also check out Brendan Gregg's &lt;a href=&quot;http://queue.acm.org/detail.cfm?id=2927301&quot;&gt;ACM Queue Article&lt;/a&gt; &quot;The Flame Graph: This visualization of software execution is a new necessity for performance profiling and debugging&quot;&lt;/p&gt;&lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h3&gt;&lt;a href=&quot;https://sourceforge.net/p/sshguard/mailman/message/35580961/&quot;&gt;SSHGuard 2.0 Call for Testing&lt;/a&gt;&lt;/h3&gt;

            &lt;ul&gt;
            &lt;li&gt;SSHGuard is a tool for monitoring brute force attempts and blocking them&lt;/li&gt;
            &lt;li&gt;It has been a favourite of mine for a while because it runs as a pipe from syslogd, rather than reading the log files from the disk&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;A lot of work to get SSHGuard working with new log sources (journalctl, macOS log) and backends (firewalld, ipset) has happened in 2.0. The new version also uses a configuration file.&lt;/p&gt;

            &lt;p&gt;Most importantly, SSHGuard has been split into several processes piped into one another (sshg-logmon | sshg-parser | sshg-blocker | sshg-fw). sshg-parser can run with capsicum(4) and pledge(2). sshg-blocker can be sandboxed in its default configuration (without pid file, whitelist, blacklisting) and has not been tested sandboxed in other configurations.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;Breaking the processes up so that the sensitive bits can be sandboxes is very nice to see&lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h2&gt;Beastie Bits&lt;/h2&gt;

            &lt;ul&gt;
            &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://2007.asiabsdcon.org/papers/P16-paper.pdf&quot;&gt;pjd's 2007 paper from AsiaBSDCon: &quot;Porting the ZFS file system to the FreeBSD operating system&quot;&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://vimeo.com/user60888329&quot;&gt;A Message From the FreeBSD Foundation&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://thenewstack.io/remembering-roger-faulkner/&quot;&gt;Remembering Roger Faulkner, Unix Champion&lt;/a&gt; and &lt;a href=&quot;https://news.ycombinator.com/item?id=13293596&quot;&gt;A few HN comments (including Bryan Cantrill)&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h2&gt;Feedback/Questions&lt;/h2&gt;

            &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;http://pastebin.com/QtyJeHMk&quot;&gt; Peter - TrueOS Network&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;http://pastebin.com/ru726VTV&quot;&gt; Chris - Remote Desktop&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;http://pastebin.com/LQZPgF5g&quot;&gt; Goetz - Geli on Serial&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;http://pastebin.com/jFeL8zKX&quot;&gt; Joe - BGP&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;http://pastebin.com/Xq9cbmfn&quot;&gt; Alejandro - BSD Router&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;ul&gt;
            &lt;li&gt;Send questions, comments, show ideas/topics, or stories you want mentioned on the show to &lt;a href=&quot;mailto:feedback@bsdnow.tv&quot;&gt;feedback@bsdnow.tv&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
        </content>
    </entry>
</feed>
