<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:smi="https://www.betterfeeds.org/series-media-info/1" xmlns:media="http://search.yahoo.com/mrss/" xmlns:psc="http://podlove.org/simple-chapters" xml:lang="en-us">
    <title>BSD Now</title>
    <subtitle>A weekly show covering the latest developments in the world of the BSD family of operating systems. News, Tutorials and Interviews for new users and long time developers alike.</subtitle>
    <icon>http://www.jupiterbroadcasting.com/images/bsdnow-badge.jpg</icon>
    <link href="https://feeds.betterfeeds.org/bsdnow.atom" rel="self" type="application/atom+xml; charset=utf-8" title="BSD Now"/>
    <link href="http://www.bsdnow.tv/" rel="alternate" type="text/html"/>
    <link href="https://itunes.apple.com/us/podcast/bsd-now-mp3/id701045710" rel="archives" type="text/html" title="iTunes - Audio"/>
    <link href="https://itunes.apple.com/cn/podcast/bsd-now-hd/id850665429" rel="archives" type="text/html" title="iTunes - Video"/>
    <link href="https://www.youtube.com/user/jupiterbroadcasting/videos" rel="archives" type="text/html" title="YouTube"/>
    <link href="http://feeds.feedburner.com/BsdNowMp3" rel="archives" type="application/rss+xml" title="BSD Now MP3 Audio"/>
    <link href="http://feeds.feedburner.com/BsdNowOgg" rel="archives" type="application/rss+xml" title="BSD Now OGG Audio"/>
    <link href="http://feeds.feedburner.com/BsdNowMobile" rel="archives" type="application/rss+xml" title="BSD Now SD Video"/>
    <link href="http://feeds.feedburner.com/BsdNowHd" rel="archives" type="application/rss+xml" title="BSD Now HD Video"/>
    <link href="http://bitlove.org/jupiterbroadcasting/bsdnowhd/feed" rel="archives" type="application/rss+xml" title="BSD Now HD Video (BitTorrent)"/>
    <link href="https://feeds.betterfeeds.org/bsdnow/bsdnow-2016-09.atom" rel="next" type="application/atom+xml; charset=utf-8"/>
    <link href="https://feeds.betterfeeds.org/bsdnow.atom" rel="first" type="application/atom+xml; charset=utf-8"/>
    <link href="https://feeds.betterfeeds.org/bsdnow/bsdnow-2013-09.atom" rel="last" type="application/atom+xml; charset=utf-8"/>
    <id>http://www.bsdnow.tv/</id>
    <updated>2016-12-09T18:02:00Z</updated>
    <smi:sequential>false</smi:sequential>
    <author>
        <name>Allan Jude</name>
        <email>allan@jupiterbroadcasting.com</email>
        <uri>https://twitter.com/allanjude</uri>
    </author>
    <author>
        <name>Kris Moore</name>
        <email>kris@pcbsd.org</email>
        <uri>https://twitter.com/pcbsdkris</uri>
    </author>
    <entry>
        <title>The APU, BSD Style!</title>
        <smi:episode>171</smi:episode>
        <link rel="alternate" type="text/html" href="http://www.bsdnow.tv/episodes/2016_12_07-the_apu_bsd_style"/>
        <id>http://www.bsdnow.tv/episodes/2016_12_07-the_apu_bsd_style</id>
        <published>2016-12-08T01:35:13-08:00</published>
        <updated>2016-12-09T10:58:00Z</updated>
        <link length="42054939" href="http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/jbmirror/bsd-0171.mp3" type="audio/mpeg" rel="enclosure"/>
        <media:group>
            <media:content fileSize="42054939" duration="5233" url="http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/jbmirror/bsd-0171.mp3" type="audio/mpeg" medium="audio" isDefault="true"/>
            <media:content fileSize="64598951" duration="5233" url="http://www.podtrac.com/pts/redirect.ogg/traffic.libsyn.com/jbmirror/bsd-0171.ogg" type="audio/ogg" medium="audio" isDefault="false"/>
            <media:content fileSize="305436508" duration="5233" url="http://www.podtrac.com/pts/redirect.mp4/201406.jb-dl.cdn.scaleengine.net/bsdnow/2016/bsd-0171-432p.mp4" type="video/mp4" medium="video" isDefault="false"/>
            <media:content fileSize="589357484" duration="5233" url="http://www.podtrac.com/pts/redirect.mp4/201406.jb-dl.cdn.scaleengine.net/bsdnow/2016/bsd-0171.mp4" type="video/mp4" medium="video" isDefault="false"/>
            <media:content fileSize="589357484" duration="5233" url="http://bitlove.org/jupiterbroadcasting/bsdnowhd/bsd-0171.mp4.torrent" type="application/x-bittorrent; enclosed=&quot;video/mp4&quot;" medium="video" isDefault="false"/>
            <media:content fileSize="82315" url="http://www.jupiterbroadcasting.com/wp-content/uploads/2016/12/bsd-0171-v.jpg" type="image/jpg" medium="image" width="854" height="506"/>
        </media:group>
        <psc:chapters version="1.1">
            <psc:chapter start="00:01:25" title="Headlines"/>
            <psc:chapter start="00:01:25" title="OpenBSD on PC Engines APU2" href="https://github.com/elad/openbsd-apu2"/>
            <psc:chapter start="00:10:50" title="OpenBSD on X1 Carbon" href="https://functionallyparanoid.com/2016/11/29/where-the-rubber-meets-the-road-part-one/"/>
            <psc:chapter start="00:14:45" title="AD: DigitalOcean - Simple Cloud Hosting, Built for Developers" href="http://www.digitalocean.com/" image="http://www.bsdnow.tv/images/2.png"/>
            <psc:chapter start="00:17:30" title="FreeBSD jail server with iocage &amp; ansible" href="https://github.com/JoergFiedler/freebsd-ansible-demo"/>
            <psc:chapter start="00:20:30" title="bsdiff reduces Android apk bandwidth usage" href="http://android-developers.blogspot.ca/2016/12/saving-data-reducing-the-size-of-app-updates-by-65-percent.html"/>
            <psc:chapter start="00:30:15" title="News Roundup"/>
            <psc:chapter start="00:30:15" title="In-depth review of NAS4Free" href="https://distrowatch.com/weekly.php?issue=20161114#nas4free"/>
            <psc:chapter start="00:34:05" title="Browsix: Unix in the browser" href="https://browsix.org/"/>
            <psc:chapter start="00:40:30" title="AD: iXsystems - Enterprise Servers and Storage for Open Source" href="http://www.ixsystems.com/bsdnow/" image="http://www.bsdnow.tv/images/1.png"/>
            <psc:chapter start="00:43:30" title="Review of PAM Mastery" href="https://www.cyberciti.biz/reviews/book-review-pam-mastery/"/>
            <psc:chapter start="00:48:50" title="Reflections on Trusting Trust" href="http://www.win.tue.nl/~aeb/linux/hh/thompson/trust.html"/>
            <psc:chapter start="00:59:40" title="Beastie Bits"/>
            <psc:chapter start="00:59:45" title="Beastie Stockings" href="https://www.etsy.com/listing/496638945/freebsd-beastie-christmas-stocking"/>
            <psc:chapter start="01:00:40" title="Migrating ZFS from mirrored to raidz1 pool" href="http://ximalas.info/2016/12/06/migrating-zfs-from-mirrored-pool-to-raidz1-pool/"/>
            <psc:chapter start="01:02:55" title="OpenBSD and you" href="https://home.nuug.no/~peter/blug2016/"/>
            <psc:chapter start="01:03:25" title="Watson.org FreeBSD and Linux cross reference" href="http://fxr.watson.org/"/>
            <psc:chapter start="01:04:50" title="OpenGrok" href="http://bxr.su/"/>
            <psc:chapter start="01:05:00" title="FreeBSD SA-16:37: libc" href="https://www.freebsd.org/security/advisories/FreeBSD-SA-16:37.libc.asc"/>
            <psc:chapter start="01:06:15" title="HardenedBSD issues correction for libc patch" href="https://github.com/HardenedBSD/hardenedBSD/commit/fb823297fbced336b6beeeb624e2dc65b67aa0eb"/>
            <psc:chapter start="01:06:40" title="BSD assembly"/>
            <psc:chapter start="01:07:25" title="AD: Tarsnap - Online Backups for the Truly Paranoid" href="http://www.tarsnap.com/bsdnow" image="http://www.bsdnow.tv/images/3.png"/>
            <psc:chapter start="01:09:25" title="Feedback/Questions"/>
            <psc:chapter start="01:09:25" title="Chris - IPFW + Wifi" href="http://pastebin.com/WRiuW6nn"/>
            <psc:chapter start="01:13:15" title="Jason - bhyve pci" href="http://pastebin.com/JgerqZZP"/>
            <psc:chapter start="01:15:10" title="Al - pf errors" href="http://pastebin.com/3XY5MVca"/>
            <psc:chapter start="01:18:00" title="Zach - Xorg settings" href="http://pastebin.com/Kty0qYXM"/>
            <psc:chapter start="01:24:40" title="Bart - Wireless Support" href="http://pastebin.com/m3D81GBW"/>
        </psc:chapters>
        <contributor>
            <name>JT</name>
            <uri>https://twitter.com/q5sys</uri>
        </contributor>
        <summary>Today on the show, we've got a look at running OpenBSD on a APU, some BSD in your Android, managing your own FreeBSD cloud service with ansible &amp; much more. Keep it turned on your place to B...SD!</summary>
        <content type="html">&lt;h1&gt;Episode 171 The APU - BSD Style!&lt;/h1&gt;
            &lt;h2&gt;Headlines&lt;/h2&gt;

            &lt;h3&gt;&lt;a href=&quot;https://github.com/elad/openbsd-apu2&quot;&gt;OpenBSD on PC Engines APU2&lt;/a&gt;&lt;/h3&gt;

            &lt;ul&gt;
            &lt;li&gt;A detailed walkthrough of building an OpenBSD firewall on a PC Engines APU2&lt;/li&gt;
            &lt;li&gt;It starts with a breakdown of the parts that were purchases, totally around $200&lt;/li&gt;
            &lt;li&gt;Then the reader is walked through configuring the serial console, flashing the ROM, and updating the BIOS&lt;/li&gt;
            &lt;li&gt;The next step is actually creating a custom OpenBSD install image, and pre-configuring its serial console. Starting with OpenBSD 6.0, this step is done automatically by the installer&lt;/li&gt;
            &lt;li&gt;Installation:

            &lt;ul&gt;
            &lt;li&gt;Power off the APU2&lt;/li&gt;
            &lt;li&gt;Insert the bootable OpenBSD installer USB flash drive to one of the USB slots on the APU2&lt;/li&gt;
            &lt;li&gt;Power on the APU2, press F10 to get to the boot menu, and choose to boot from USB (usually option number 1)&lt;/li&gt;
            &lt;li&gt;At the boot&amp;gt; prompt, remember the serial console settings (see above)&lt;/li&gt;
            &lt;li&gt;Also at the boot&amp;gt; prompt, press Enter to start the installer&lt;/li&gt;
            &lt;li&gt;Follow the installation instructions&lt;/li&gt;
            &lt;/ul&gt;&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;The driver used for wireless networking is athn(4). It might not work properly out of the box. Once OpenBSD is installed, run fw_update with no arguments. It will figure out which firmware updates are required and will download and install them. When it finishes, reboot.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;hr&gt;

            &lt;h3&gt;&lt;a href=&quot;https://functionallyparanoid.com/2016/11/29/where-the-rubber-meets-the-road-part-one/&quot;&gt;Where the rubber meets the road... (part one)&lt;/a&gt;&lt;/h3&gt;

            &lt;ul&gt;
            &lt;li&gt;A user describes their adventures installing OpenBSD and Arch Linux on a new Lenovo X1 Carbon (4th gen, skylake)&lt;/li&gt;
            &lt;li&gt;They also detail why they moved away from their beloved Macbook, which while long, does describe a journey away from Apple that we've heard elsewhere.&lt;/li&gt;
            &lt;li&gt;The journey begins with getting a new Windows laptop, shrinking the partition and creating space for a triple-boot install, of Windows / Arch / OpenBSD&lt;/li&gt;
            &lt;li&gt;Brian then details how he setup the partitioning and performed the initial Arch installation, getting it tuned to his specifications.&lt;/li&gt;
            &lt;li&gt;Next up was OpenBSD though, and that went sideways initially due to a new NVMe drive that wasn't fully supported (yet)&lt;/li&gt;
            &lt;li&gt;The article is split into two parts (we will bring you the next installment at a future date), but he leaves us with the plan of attack to build a custom OpenBSD kernel with corrected PCI device identifiers.&lt;/li&gt;
            &lt;li&gt;We wish Brian luck, and look forward to the &quot;rest of the story&quot; soon.&lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h3&gt;&lt;a href=&quot;https://github.com/JoergFiedler/freebsd-ansible-demo&quot;&gt;Howto setup a FreeBSD jail server using iocage and ansible.&lt;/a&gt;&lt;/h3&gt;

            &lt;ul&gt;
            &lt;li&gt;Setting up a FreeBSD jail server can be a daunting task. However when a guide comes along which shows you how to do that, including not exposing a single (non-jailed) port to the outside world, you know we had a take a closer look.&lt;/li&gt;
            &lt;li&gt;This guide comes to us from GitHub, courtesy of Joerg Fielder. &lt;/li&gt;
            &lt;li&gt;&lt;p&gt;The project goals seem notable:&lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;Ansible playbook that creates a FreeBSD server which hosts multiple jails.&lt;/p&gt;

            &lt;ul&gt;
            &lt;li&gt;Travis is used to run/test the playbook.&lt;/li&gt;
            &lt;li&gt;No service on the host is exposed externally.&lt;/li&gt;
            &lt;li&gt;All external connections terminate within a jail.&lt;/li&gt;
            &lt;li&gt;Roles can be reused using Ansible Galaxy.&lt;/li&gt;
            &lt;li&gt;Combine any of those roles to create FreeBSD server, which perfectly suits you.&lt;/li&gt;
            &lt;/ul&gt;&lt;/li&gt;
            &lt;li&gt;To get started, you'll need a machine with Ansible, Vagrant and VirtualBox, and your credentials to AWS if you want it to automatically create / destroy EC2 instances.&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;There's already an impressive list of Anisible roles created for you to start with:&lt;/p&gt;

            &lt;ul&gt;
            &lt;li&gt;freebsd-build-server - Creates a FreeBSD poudriere build server&lt;/li&gt;
            &lt;li&gt;freebsd-jail-host - FreeBSD Jail host&lt;/li&gt;
            &lt;li&gt;freebsd-jailed - Provides a jail&lt;/li&gt;
            &lt;li&gt;freebsd-jailed-nginx - Provides a jailed nginx server&lt;/li&gt;
            &lt;li&gt;freebsd-jailed-php-fpm - Creates a php-fpm pool and a ZFS dataset which is used as web root by php-fpm&lt;/li&gt;
            &lt;li&gt;freebsd-jailed-sftp - Installs a SFTP server&lt;/li&gt;
            &lt;li&gt;freebsd-jailed-sshd - Provides a jailed sshd server.&lt;/li&gt;
            &lt;li&gt;freebsd-jailed-syslogd - Provides a jailed syslogd&lt;/li&gt;
            &lt;li&gt;freebsd-jailed-btsync - Provides a jailed btsync instance server&lt;/li&gt;
            &lt;li&gt;freebsd-jailed-joomla - Installs Joomla&lt;/li&gt;
            &lt;li&gt;freebsd-jailed-mariadb - Provides a jailed MariaDB server&lt;/li&gt;
            &lt;li&gt;freebsd-jailed-wordpress - Provides a jailed Wordpress server.&lt;/li&gt;
            &lt;/ul&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;Since the machines have to be customized before starting, he mentions that cloud-init is used to do the following:&lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;activate pf firewall&lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;add a pass all keep state rule to pf to keep track of connection states, which in turn allows you to reload the pf service without losing the connection&lt;/li&gt;
            &lt;li&gt;install the following packages:

            &lt;ul&gt;
            &lt;li&gt;sudo&lt;/li&gt;
            &lt;li&gt;bash&lt;/li&gt;
            &lt;li&gt;python27&lt;/li&gt;
            &lt;/ul&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;allow passwordless sudo for user ec2-user
            &quot;&lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;From there it is pretty straight-forward, just a couple commands to spin up the VM's either locally on your VirtualBox host, or in the cloud with AWS. Internally the VM's are auto-configured with iocage to create jails, where all your actual services run.&lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;A neat project, check it out today if you want a shake-n-bake type cloud + jail solution.&lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h3&gt;&lt;a href=&quot;http://android-developers.blogspot.ca/2016/12/saving-data-reducing-the-size-of-app-updates-by-65-percent.html&quot;&gt;Colin Percival's bsdiff helps reduce Android apk bandwidth usage by 6 petabytes per day&lt;/a&gt;&lt;/h3&gt;

            &lt;ul&gt;
            &lt;li&gt;A post on the official Android-Developers blog, talks about how they used bsdiff (and bspatch) to reduce the size of Android application updates by 65%&lt;/li&gt;
            &lt;li&gt;bsdiff was developed by FreeBSD's Colin Percival&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;Earlier this year, we announced that we started using the bsdiff algorithm (by Colin Percival). Using bsdiff, we were able to reduce the size of app updates on average by 47% compared to the full APK size.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;This post is actually about the second generation of the code.&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;Today, we're excited to share a new approach that goes further — File-by-File patching. App Updates using File-by-File patching are, on average, 65% smaller than the full app, and in some cases more than 90% smaller.
            Android apps are packaged as APKs, which are ZIP files with special conventions. Most of the content within the ZIP files (and APKs) is compressed using a technology called Deflate. Deflate is really good at compressing data but it has a drawback: it makes identifying changes in the original (uncompressed) content really hard. Even a tiny change to the original content (like changing one word in a book) can make the compressed output of deflate look completely different. Describing the differences between the original content is easy, but describing the differences between the compressed content is so hard that it leads to inefficient patches.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;So in the second generation of the code, they use bsdiff on each individual file, then package that, rather than diffing the original and new archives&lt;/li&gt;
            &lt;li&gt;bsdiff is used in a great many other places, including shrinking the updates for the Firefox and Chrome browsers&lt;/li&gt;
            &lt;li&gt;You can find out more about bsdiff here: http://www.daemonology.net/bsdiff/&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;A far more sophisticated algorithm, which typically provides roughly 20% smaller patches, is described in my &lt;a href=&quot;http://www.daemonology.net/papers/thesis.pdf&quot;&gt;doctoral thesis&lt;/a&gt;.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;Considering the gains, it is interesting that no one has implemented Colin's more sophisticated algorithm&lt;/li&gt;
            &lt;li&gt;Colin had an &lt;a href=&quot;https://twitter.com/cperciva/status/806426180379230208&quot;&gt;interesting observation&lt;/a&gt; last night: &quot;I just realized that bandwidth savings due to bsdiff are now roughly equal to what the &lt;em&gt;total internet traffic&lt;/em&gt; was when I wrote it in 2003.&quot;&lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h2&gt;News Roundup&lt;/h2&gt;

            &lt;h3&gt;&lt;a href=&quot;https://distrowatch.com/weekly.php?issue=20161114#nas4free&quot;&gt;Distrowatch does an in-depth review of NAS4Free&lt;/a&gt;&lt;/h3&gt;

            &lt;ul&gt;
            &lt;li&gt;Jesse Smith over at DistroWatch has done a pretty in-depth review of Nas4Free.&lt;/li&gt;
            &lt;li&gt;The review starts with mentioning that NAS4Free works on 3 platforms, ARM/i386/AMD64 and for the purposes of this review he would be using AMD64 builds.&lt;/li&gt;
            &lt;li&gt;After going through the initial install (doing typical disk management operations, such as GPT/MBR, etc) he was ready to begin using the product.&lt;/li&gt;
            &lt;li&gt;One concern originally observed was that the initial boot seemed rather slow. Investigation revealed this was due to it loading the entire OS image into memory, and the first (long) disk read did take some time, but once loaded was super responsive.&lt;/li&gt;
            &lt;li&gt;The next steps involved doing the initial configuration, which meant creating a new ZFS storage pool. After this process was done, he did find one puzzling UI option called &quot;VM&quot; which indicated it can be linked to VirtualBox in some way, but the Docs didn't reveal its secrets of usage.&lt;/li&gt;
            &lt;li&gt;Additionally covered were some of the various &quot;Access&quot; methods, including traditional UNIX permissions, AD and LDAP, and then various Sharing services which are typical to a NAS, Such as NFS / Samba and others.&lt;/li&gt;
            &lt;li&gt;One neat feature was the built-in file-browser via the web-interface, which allows you another method of getting at your data when sometimes NFS / Samba or WebDav aren't enough.&lt;/li&gt;
            &lt;li&gt;Jesse gives us a nice round-up conclusion as well&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;Most of the NAS operating systems I have used in the past were built around useful features. Some focused on making storage easy to set up and manage, others focused on services, such as making files available over multiple protocols or managing torrents. Some strive to be very easy to set up. NAS4Free does pretty well in each of the above categories. It may not be the easiest platform to set up, but it's probably a close second. It may not have the prettiest interface for managing settings, but it is quite easy to navigate. NAS4Free may not have the most add-on services and access protocols, but I suspect there are more than enough of both for most people.&lt;/p&gt;

            &lt;p&gt;Where NAS4Free does better than most other solutions I have looked at is security. I don't think the project's website or documentation particularly focuses on security as a feature, but there are plenty of little security features that I liked. NAS4Free makes it very easy to lock the text console, which is good because we do not all keep our NAS boxes behind locked doors. The system is fairly easy to upgrade and appears to publish regular security updates in the form of new firmware. NAS4Free makes it fairly easy to set up user accounts, handle permissions and manage home directories. It's also pretty straight forward to switch from HTTP to HTTPS and to block people not on the local network from accessing the NAS's web interface.&lt;/p&gt;

            &lt;p&gt;All in all, I like NAS4Free. It's a good, general purpose NAS operating system. While I did not feel the project did anything really amazing in any one category, nor did I run into any serious issues. The NAS ran as expected, was fairly straight forward to set up and easy to manage. This strikes me as an especially good platform for home or small business users who want an easy set up, some basic security and a solid collection of features.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;hr&gt;

            &lt;h3&gt;&lt;a href=&quot;https://browsix.org/&quot;&gt;Browsix: Unix in the browser tab&lt;/a&gt;&lt;/h3&gt;

            &lt;ul&gt;
            &lt;li&gt;Browsix is a research project from the PLASMA lab at the University of Massachusetts, Amherst.&lt;/li&gt;
            &lt;li&gt;The goal: Run C, C++, Go and Node.js programs as processes in browsers, including LaTeX, GNU Make, Go HTTP servers, and POSIX shell scripts.&lt;/li&gt;
            &lt;li&gt;&quot;Processes are built on top of Web Workers, letting applications run in parallel and spawn subprocesses. System calls include fork, spawn, exec, and wait.&quot;&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;Pipes are supported with pipe(2) enabling developers to compose processes into pipelines.&lt;/p&gt;

            &lt;p&gt;Sockets include support for TCP socket servers and clients, making it possible to run applications like databases and HTTP servers together with their clients in the browser.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;Browsix comprises two core parts:

            &lt;ul&gt;
            &lt;li&gt;A kernel written in TypeScript that makes core Unix features (including pipes, concurrent processes, signals, sockets, and a shared file system) available to web applications.&lt;/li&gt;
            &lt;li&gt;Extended JavaScript runtimes for C, C++, Go, and Node.js that support running programs written in these languages as processes in the browser.&lt;/li&gt;
            &lt;/ul&gt;&lt;/li&gt;
            &lt;li&gt;This seems like an interesting project, although I am not sure how it would be used as more than a toy&lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h3&gt;&lt;a href=&quot;https://www.cyberciti.biz/reviews/book-review-pam-mastery/&quot;&gt;Book Review: PAM Mastery&lt;/a&gt;&lt;/h3&gt;

            &lt;ul&gt;
            &lt;li&gt;nixCraft does a book review of Michael W. Lucas' &quot;Pam Mastery&quot;&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;Linux, FreeBSD, and Unix-like systems are multi-user and need some way of authenticating individual users. Back in the old days, this was done in different ways. You need to change each Unix application to use different authentication scheme.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;Before PAM, if you wanted to use an SQL database to authenticate users, you had to write specific support for that into each of your applications. Same for LDAP, etc.&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;So Open Group lead to the development of PAM for the Unix-like system. Today Linux, FreeBSD, MacOS X and many other Unix-like systems are configured to use a centralized authentication mechanism called Pluggable Authentication Modules (PAM). The book &quot;PAM Mastery&quot; deals with the black magic of PAM.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;Of course, each OS chose to implement PAM a little bit differently&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;The book starts with the basic concepts about PAM and authentication. You learn about Multi-Factor Authentication and why use PAM instead of changing each program to authenticate the user. The author went into great details about why PAM is useful for developers and sysadmin for several reasons. The examples cover CentOS Linux (RHEL and clones), Debian Linux, and FreeBSD Unix system.&lt;/p&gt;

            &lt;p&gt;I like the way the author described PAM Configuration Files and Common Modules that covers everyday scenarios for the sysadmin. PAM configuration file format and PAM Module Interfaces are discussed in easy to understand language. Control flags in PAM can be very confusing for new sysadmins. Modules can be stacked in a particular order, and the control flags determine how important the success or failure of a particular module.&lt;/p&gt;

            &lt;p&gt;There is also a chapter about using one-time passwords (Google Authenticator) for your application.&lt;/p&gt;

            &lt;p&gt;The final chapter is all about enforcing good password policies for users and apps using PAM.&lt;/p&gt;

            &lt;p&gt;The sysadmin would find this book useful as it covers a common authentication scheme that can be used with a wide variety of applications on Unix. You will master PAM topics and take control over authentication for your organization IT infrastructure. If you are Linux or Unix sysadmin, I would highly recommend this book. Once again Michael W Lucas nailed it. The only book you may need for PAM deployment.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;https://www.michaelwlucas.com/tools/pam&quot;&gt;get &quot;PAM Mastery&quot; &lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h3&gt;&lt;a href=&quot;http://www.win.tue.nl/~aeb/linux/hh/thompson/trust.html&quot;&gt;Reflections on Trusting Trust - Ken Thompson, co-author of UNIX&lt;/a&gt;&lt;/h3&gt;

            &lt;blockquote&gt;
            &lt;p&gt;Ken Thompson's &quot;cc hack&quot; - Presented in the journal, Communication of the ACM, Vol. 27, No. 8, August 1984, in a paper entitled &quot;Reflections on Trusting Trust&quot;, Ken Thompson, co-author of UNIX, recounted a story of how he created a version of the C compiler that, when presented with the source code for the &quot;login&quot; program, would automatically compile in a backdoor to allow him entry to the system. This is only half the story, though. In order to hide this trojan horse, Ken also added to this version of &quot;cc&quot; the ability to recognize if it was recompiling itself to make sure that the newly compiled C compiler contained both the &quot;login&quot; backdoor, and the code to insert both trojans into a newly compiled C compiler. In this way, the source code for the C compiler would never show that these trojans existed.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;The article starts off by talking about a content to write a program that produces its own source code as output. Or rather, a C program, that writes a C program, that produces its own source code as output.&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;The C compiler is written in C. What I am about to describe is one of many &quot;chicken and egg&quot; problems that arise when compilers are written in their own language. In this case, I will use a specific example from the C compiler.&lt;/p&gt;

            &lt;p&gt;Suppose we wish to alter the C compiler to include the sequence &quot;\v&quot; to represent the vertical tab character. The extension to Figure 2 is obvious and is presented in Figure 3. We then recompile the C compiler, but we get a diagnostic. Obviously, since the binary version of the compiler does not know about &quot;\v,&quot; the source is not legal C. We must &quot;train&quot; the compiler. After it &quot;knows&quot; what &quot;\v&quot; means, then our new change will become legal C. We look up on an ASCII chart that a vertical tab is decimal 11. We alter our source to look like Figure 4. Now the old compiler accepts the new source. We install the resulting binary as the new official C compiler and now we can write the portable version the way we had it in Figure 3.&lt;/p&gt;

            &lt;p&gt;The actual bug I planted in the compiler would match code in the UNIX &quot;login&quot; command. The replacement code would miscompile the login command so that it would accept either the intended encrypted password or a particular known password. Thus if this code were installed in binary and the binary were used to compile the login command, I could log into that system as any user. Such blatant code would not go undetected for long. Even the most casual perusal of the source of the C compiler would raise suspicions.&lt;/p&gt;

            &lt;p&gt;Next &quot;simply add a second Trojan horse to the one that already exists. The second pattern is aimed at the C compiler. The replacement code is a Stage I self-reproducing program that inserts both Trojan horses into the compiler. This requires a learning phase as in the Stage II example. First we compile the modified source with the normal C compiler to produce a bugged binary. We install this binary as the official C. We can now remove the bugs from the source of the compiler and the new binary will reinsert the bugs whenever it is compiled. Of course, the login command will remain bugged with no trace in source anywhere.&lt;/p&gt;

            &lt;p&gt;So now there is a trojan'd version of cc. If you compile a clean version of cc, using the bad cc, you will get a bad cc. If you use the bad cc to compile the login program, it will have a backdoor. The source code for both backdoors no longer exists on the system. You can audit the source code of cc and login all you want, they are trustworthy.&lt;/p&gt;

            &lt;p&gt;The compiler you use to compile your new compiler, is the untrustworthy bit, but you have no way to know it is untrustworthy, and no way to make a new compiler, without using the bad compiler.&lt;/p&gt;

            &lt;p&gt;The moral is obvious. You can't trust code that you did not totally create yourself. (Especially code from companies that employ people like me.) No amount of source-level verification or scrutiny will protect you from using untrusted code. In demonstrating the possibility of this kind of attack, I picked on the C compiler. I could have picked on any program-handling program such as an assembler, a loader, or even hardware microcode. As the level of program gets lower, these bugs will be harder and harder to detect. A well installed microcode bug will be almost impossible to detect.&lt;/p&gt;

            &lt;p&gt;Acknowledgment: I first read of the possibility of such a Trojan horse in an Air Force critique of the security of an early implementation of Multics. I can- not find a more specific reference to this document. I would appreciate it if anyone who can supply this reference would let me know.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;hr&gt;

            &lt;h2&gt;Beastie Bits&lt;/h2&gt;

            &lt;ul&gt;
            &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.etsy.com/listing/496638945/freebsd-beastie-christmas-stocking&quot;&gt;Custom made Beastie Stockings&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://ximalas.info/2016/12/06/migrating-zfs-from-mirrored-pool-to-raidz1-pool/&quot;&gt;Migrating ZFS from mirrored pool to raidz1 pool&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://home.nuug.no/~peter/blug2016/&quot;&gt;OpenBSD and you&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://fxr.watson.org/&quot;&gt;Watson.org FreeBSD and Linux cross reference &lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://bxr.su/&quot;&gt;OpenGrok&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.freebsd.org/security/advisories/FreeBSD-SA-16:37.libc.asc&quot;&gt;FreeBSD SA-16:37: libc&lt;/a&gt; -- A 26+ year old bug found in BSD's libc, all BSDs likely affected -- A specially crafted argument can trigger a static buffer overflow in the library, with possibility to rewrite following static buffers that belong to other library functions.&lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/HardenedBSD/hardenedBSD/commit/fb823297fbced336b6beeeb624e2dc65b67aa0eb&quot;&gt;HardenedBSD issues correction for libc patch &lt;/a&gt; -- original patch improperly calculates how many bytes are remaining in the buffer.&lt;/p&gt;&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;From December the 27th until the 30th there the 33rd Chaos Communication Congress[0] is going to take place in Hamburg, Germany. Think of it as the yearly gathering of the european hackerscene and their overseas friends. I am one of the persons organizing the &quot;&lt;a href=&quot;https://events.ccc.de/congress/2016/wiki/Assembly:BSD&quot;&gt;BSD assembly&lt;/a&gt;&quot; as a gathering place for BSD enthusiasts and waving the flag amidst the all the other projects / communities.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;hr&gt;

            &lt;h2&gt;Feedback/Questions&lt;/h2&gt;

            &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;http://pastebin.com/WRiuW6nn&quot;&gt; Chris - IPFW + Wifi&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;http://pastebin.com/JgerqZZP&quot;&gt; Jason - bhyve pci&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;http://pastebin.com/3XY5MVca&quot;&gt; Al - pf errors&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;http://pastebin.com/Kty0qYXM&quot;&gt; Zach - Xorg settings&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;http://pastebin.com/m3D81GBW&quot;&gt; Bart - Wireless Support&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;ul&gt;
            &lt;li&gt;Send questions, comments, show ideas/topics, or stories you want mentioned on the show to &lt;a href=&quot;mailto:feedback@bsdnow.tv&quot;&gt;feedback@bsdnow.tv&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
        </content>
    </entry>
    <entry>
        <title>Sandboxing Cohabitation</title>
        <smi:episode>170</smi:episode>
        <link rel="alternate" type="text/html" href="http://www.bsdnow.tv/episodes/2016_11_30-sandboxing_cohabitation"/>
        <id>http://www.bsdnow.tv/episodes/2016_12_01-sandboxing_cohabitataion</id>
        <published>2016-12-01T03:57:23-08:00</published>
        <updated>2016-12-09T10:44:00Z</updated>
        <link length="36864304" href="http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/jbmirror/bsd-0170.mp3" type="audio/mpeg" rel="enclosure"/>
        <media:group>
            <media:content fileSize="36864304" duration="4584" url="http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/jbmirror/bsd-0170.mp3" type="audio/mpeg" medium="audio" isDefault="true"/>
            <media:content fileSize="56173574" duration="4584" url="http://www.podtrac.com/pts/redirect.ogg/traffic.libsyn.com/jbmirror/bsd-0170.ogg" type="audio/ogg" medium="audio" isDefault="false"/>
            <media:content fileSize="267554715" duration="4584" url="http://www.podtrac.com/pts/redirect.mp4/201406.jb-dl.cdn.scaleengine.net/bsdnow/2016/bsd-0170-432p.mp4" type="video/mp4" medium="video" isDefault="false"/>
            <media:content fileSize="516278628" duration="4584" url="http://www.podtrac.com/pts/redirect.mp4/201406.jb-dl.cdn.scaleengine.net/bsdnow/2016/bsd-0170.mp4" type="video/mp4" medium="video" isDefault="false"/>
            <media:content fileSize="516278628" duration="4584" url="http://bitlove.org/jupiterbroadcasting/bsdnowhd/bsd-0170.mp4.torrent" type="application/x-bittorrent; enclosed=&quot;video/mp4&quot;" medium="video" isDefault="false"/>
            <media:content fileSize="85017" url="http://www.jupiterbroadcasting.com/wp-content/uploads/2016/11/bsd-0170-v.jpg" type="image/jpg" medium="image" width="854" height="506"/>
        </media:group>
        <psc:chapters version="1.1">
            <psc:chapter start="00:01:00" title="Headlines"/>
            <psc:chapter start="00:01:00" title="EuroBSDcon 2016 Slides" href="https://2016.eurobsdcon.org/PresentationSlides/"/>
            <psc:chapter start="00:10:50" title="FreeBSD and Gentoo on a ZFS Volume" href="https://ericmccorkleblog.wordpress.com/2016/11/15/cohabiting-freebsd-and-gentoo-linux-on-a-common-zfs-volume/"/>
            <psc:chapter start="00:15:50" title="AD: iXsystems - Enterprise Servers and Storage for Open Source" href="http://www.ixsystems.com/bsdnow/" image="http://www.bsdnow.tv/images/1.png"/>
            <psc:chapter start="00:20:35" title="HardenedBSD adds Safestack into base" href="https://hardenedbsd.org/article/shawn-webb/2016-11-27/introducing-safestack"/>
            <psc:chapter start="00:23:05" title="Web application sandboxing" href="https://learnbchs.org/pledge.html"/>
            <psc:chapter start="00:30:55" title="News Roundup"/>
            <psc:chapter start="00:31:00" title="Unix history now on GitHub" href="http://www.osnews.com/story/29513/Unix_history_repository_now_on_GitHub"/>
            <psc:chapter start="00:35:40" title="Yandex improves FreeBSD network stack" href="https://reviews.freebsd.org/D8526"/>
            <psc:chapter start="00:39:40" title="AD: DigitalOcean - Simple Cloud Hosting, Built for Developers" href="http://www.digitalocean.com/" image="http://www.bsdnow.tv/images/2.png"/>
            <psc:chapter start="00:42:15" title="Unix socket multiplexing history" href="https://idea.popcount.org/2016-11-01-a-brief-history-of-select2/"/>
            <psc:chapter start="00:47:15" title="How to start CLion on FreeBSD?" href="https://intellij-support.jetbrains.com/hc/en-us/articles/206525024-How-to-start-CLion-on-FreeBSD"/>
            <psc:chapter start="00:51:25" title="Beastie Bits"/>
            <psc:chapter start="00:51:30" title="TrueOS Pico" href="https://www.trueos.org/trueos-pico/"/>
            <psc:chapter start="00:52:45" title="Puppet &amp; PkgNG" href="https://github.com/xaque208/puppet-pkgng"/>
            <psc:chapter start="00:54:00" title="Notes on November London *BSD meetup" href="http://mailman.uk.freebsd.org/pipermail/ukfreebsd/2016-November/014059.html"/>
            <psc:chapter start="00:55:00" title="SemiBug meeting on Dec 20th" href="http://lists.nycbug.org/pipermail/semibug/2016-November/000131.html"/>
            <psc:chapter start="00:55:25" title="AD: Tarsnap - Online Backups for the Truly Paranoid" href="http://www.tarsnap.com/bsdnow" image="http://www.bsdnow.tv/images/3.png"/>
            <psc:chapter start="00:57:30" title="Feedback/Questions"/>
            <psc:chapter start="00:57:30" title="Erno – SSH without password" href="http://pastebin.com/SMvxur9v"/>
            <psc:chapter start="00:59:35" title="Jonathan – Magical ZFS" href="http://pastebin.com/5ETL7nmj"/>
            <psc:chapter start="01:05:05" title="George – TrueOS" href="http://pastebin.com/tSVvaV9e"/>
            <psc:chapter start="01:10:30" title="Mohammad – Jails IP" href="http://pastebin.com/T8nUexd1"/>
            <psc:chapter start="01:13:20" title="Gibheer – BEs" href="http://pastebin.com/YssXXp70"/>
        </psc:chapters>
        <contributor>
            <name>JT</name>
            <uri>https://twitter.com/q5sys</uri>
        </contributor>
        <summary>This week on the show, we've got some new info on the talks from EuroBSDCon, a look at sharing a single ZFS pool between Linux and BSD, Sandboxing &amp; much more! Stay tuned for your place to B...SD!</summary>
        <content type="html">&lt;h1&gt;Episode 170: Sandboxing Cohabitation&lt;/h1&gt;
            &lt;h2&gt;Headlines&lt;/h2&gt;

            &lt;h3&gt;&lt;a href=&quot;https://2016.eurobsdcon.org/PresentationSlides/&quot;&gt;EuroBSDcon 2016 Presentation Slides&lt;/a&gt;&lt;/h3&gt;

            &lt;ul&gt;
            &lt;li&gt;Due to circumstances beyond the control of the organizers of EuroBSDCon, there were not recordings of the talks given at the event.&lt;/li&gt;
            &lt;li&gt;However, they have collected the slide decks from each of the speakers and assembled them on this page for you&lt;/li&gt;
            &lt;li&gt;Also, we have some stuff from MeetBSD already:&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLb87fdKUIo8TAMC2HJLZ7H54edD2BeGWv&quot;&gt;Youtube Playlist &lt;/a&gt; &lt;/li&gt;
            &lt;li&gt;Not all of the sessions are posted yet, but the rest should appear shortly&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://www.freebsdfoundation.org/blog/meetbsd-2016-trip-report-domagoj-stolfa/&quot;&gt;MeetBSD 2016 Trip Report: Domagoj Stolfa&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h3&gt;&lt;a href=&quot;https://ericmccorkleblog.wordpress.com/2016/11/15/cohabiting-freebsd-and-gentoo-linux-on-a-common-zfs-volume/&quot;&gt;Cohabiting FreeBSD and Gentoo Linux on a Common ZFS Volume&lt;/a&gt;&lt;/h3&gt;

            &lt;ul&gt;
            &lt;li&gt;Eric McCorkle, who has contributed ZFS support to the FreeBSD EFI boot-loader code has posted an in-depth look at how he's setup dual-boot with FreeBSD and Gentoo on the same ZFS volume.&lt;/li&gt;
            &lt;li&gt;He starts by giving us some background on how the layout is done. First up, GRUB is used as the boot-loader, allowing boot of both Linux and BSD&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;The next non-typical thing was using /etc/fstab to manage mount-points, instead of the typical 'zfs mount' usage, (apart from /home datasets)&lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;data/home is mounted to /home, with all of its child datasets using the ZFS mountpoint system&lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;data/freebsd and its child datasets house the FreeBSD system, and all have their mountpoints set to legacy&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;data/gentoo and its child datasets house the Gentoo system, and have their mountpoints set to legacy as well&lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;So, how did he set this up? He helpfully provides an overview of the steps:&lt;/p&gt;

            &lt;ul&gt;
            &lt;li&gt;Use the FreeBSD installer to create the GPT and ZFS pool&lt;/li&gt;
            &lt;li&gt;Install and configure FreeBSD, with the native FreeBSD boot loader&lt;/li&gt;
            &lt;li&gt;Boot into FreeBSD, create the Gentoo Linux datasets, install GRUB&lt;/li&gt;
            &lt;li&gt;Boot into the Gentoo Linux installer, install Gentoo&lt;/li&gt;
            &lt;li&gt;Boot into Gentoo, finish any configuration tasks&lt;/li&gt;
            &lt;/ul&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;The rest of the article walks us through the individual commands that make up each of those steps, as well as how to craft a GRUB config file capable of booting both systems.&lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;Personally, since we are using EFI, I would have installed rEFInd, and chain-loaded each systems EFI boot code from there, allowing the use of the BSD loader, but to each their own!&lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h3&gt;&lt;a href=&quot;https://hardenedbsd.org/article/shawn-webb/2016-11-27/introducing-safestack&quot;&gt;HardenedBSD introduces Safestack into base&lt;/a&gt;&lt;/h3&gt;

            &lt;ul&gt;
            &lt;li&gt;HardenedBSD has integrated SafeStack into its base system and ports tree&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;http://clang.llvm.org/docs/SafeStack.html&quot;&gt;SafeStack&lt;/a&gt; is part of the Code Pointer Integrity (CPI) project within clang.&lt;/li&gt;
            &lt;li&gt;&quot;SafeStack is an instrumentation pass that protects programs against attacks based on stack buffer overflows, without introducing any measurable performance overhead. It works by separating the program stack into two distinct regions: the safe stack and the unsafe stack. The safe stack stores return addresses, register spills, and local variables that are always accessed in a safe way, while the unsafe stack stores everything else. This separation ensures that buffer overflows on the unsafe stack cannot be used to overwrite anything on the safe stack.&quot;&lt;/li&gt;
            &lt;li&gt;&quot;As of 28 November 2016, with clang 3.9.0, SafeStack only supports being applied to applications and not shared libraries. Multiple patches have been submitted to clang by third parties to add support for shared libraries.&quot;&lt;/li&gt;
            &lt;li&gt;SafeStack is only enabled on AMD64&lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h3&gt;&lt;a href=&quot;https://learnbchs.org/pledge.html&quot;&gt;pledge(2)... or, how I learned to love web application sandboxing&lt;/a&gt;&lt;/h3&gt;

            &lt;ul&gt;
            &lt;li&gt;We've talked about OpenBSD's sandboxing mechanism pledge() in the past, but today we have a great article by Kristaps Dzonsons, about how he grew to love it for Web Sandboxing.
            +First up, he gives us his opening argument that should make most of you sit up and listen:&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;I use application-level sandboxing a lot because I make mistakes a lot;                 and when writing web applications, the price of making mistakes is very dear.             &lt;/p&gt;

            &lt;p&gt;In the early 2000s, that meant using systrace(4) on OpenBSD and NetBSD.  Then it was seccomp(2) (followed by libseccomp(3)) on Linux.     Then there was capsicum(4) on FreeBSD and sandbox_init(3) on Mac OS X.                         &lt;/p&gt;

            &lt;p&gt;All of these systems are invoked differently; and for the most part, whenever it came     time to interface with one of them, I longed for sweet release from the nightmare.         Please, try reading seccomp(2). To the end. Aligning web application logic and security policy would require an arduous (and usually trial-and-error or worse, copy-and-paste) process. If there was any process at all — if the burden of writing a policy didn't cause me to abandon sandboxing at the start.                         &lt;/p&gt;

            &lt;p&gt;And then there was pledge(2).                         &lt;/p&gt;

            &lt;p&gt;This document is about pledge(2) and why you should use it and love it. &quot;&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;p&gt;+Not convinced yet? Maybe you should take his challenge:&lt;/p&gt;

            &lt;blockquote&gt;
            &lt;p&gt;Let's play a drinking game.     The challenge is to stay out of the hospital.             &lt;/p&gt;

            &lt;p&gt;1.Navigate to seccomp(2).&lt;br&gt;
            2. Read it to the end.&lt;br&gt;
            3. Drink every time you don't understand.                             &lt;/p&gt;

            &lt;p&gt;For capsicum(4), the    challenge is no less difficult.     To see these in action, navigate no further than OpenSSH, which interfaces with these sandboxes: sandbox-seccomp-filter.c or sandbox-capsicum.c.     (For a history lesson, you can even see sandbox-systrace.c.)         Keep in mind that these do little more than restrict resources to open descriptors and the     usual necessities of memory, signals, timing, etc. Keep that in mind and be horrified.     &quot;&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;Now Kristaps has his theory on why these are so difficult (NS..), but perhaps there is a better way. He makes the case that pledge() sits right in that sweet-spot, being powerful enough to be useful, but easy enough to implement that developers might actually use it.&lt;/li&gt;
            &lt;li&gt;All in all, a nice read, check it out! Would love to hear other developer success stories using pledge() as well.&lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h2&gt;News Roundup&lt;/h2&gt;

            &lt;h3&gt;&lt;a href=&quot;http://www.osnews.com/story/29513/Unix_history_repository_now_on_GitHub&quot;&gt;Unix history repository, now on GitHub&lt;/a&gt;&lt;/h3&gt;

            &lt;ul&gt;
            &lt;li&gt;&lt;p&gt;OS News has an interesting tidbit on their site today, about the entire commit history of Unix now being available online, starting all the way back in 1970 and bringing us forward to today. &lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;From the README&lt;/p&gt;&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;The history and evolution of the Unix operating system is made available as a revision management repository, covering the period from its inception in 1970 as a 2.5 thousand line kernel and 26 commands, to 2016 as a widely-used 27 million line system. The 1.1GB repository contains about half a million commits and more than two thousand merges. The repository employs Git system for its storage and is hosted on GitHub. It has been created by synthesizing with custom software 24 snapshots of systems developed at Bell Labs, the University of California at Berkeley, and the 386BSD team, two legacy repositories, and the modern repository of the open source FreeBSD system. In total, about one thousand individual contributors are identified, the early ones through primary research. The data set can be used for empirical research in software engineering, information systems, and software archaeology.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;This is a fascinating find, especially will be of value to students and historians who wish to look back in time to see how UNIX evolved, and in this repo ultimately turned into modern FreeBSD.&lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h3&gt;&lt;a href=&quot;https://reviews.freebsd.org/D8526&quot;&gt;Yandex commits improvements to FreeBSD network stack &lt;/a&gt;&lt;/h3&gt;

            &lt;ul&gt;
            &lt;li&gt;&quot;Rework ip_tryforward() to use FIB4 KPI.&quot;&lt;/li&gt;
            &lt;li&gt;This commit brings some code from the experimental routing branch into head&lt;/li&gt;
            &lt;li&gt;As you can see from the graphs, it offers some sizable improvements in forwarding and firewalled packets per second&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://svnweb.freebsd.org/base?view=revision&amp;amp;revision=309257&quot;&gt;commit &lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h3&gt;&lt;a href=&quot;https://idea.popcount.org/2016-11-01-a-brief-history-of-select2/&quot;&gt;The brief history of Unix socket multiplexing – select(2) system call&lt;/a&gt;&lt;/h3&gt;

            &lt;ul&gt;
            &lt;li&gt;Ever wondered about the details of socket multiplexing, aka the history of select(2)?&lt;/li&gt;
            &lt;li&gt;Well Marek today gives a treat, with a quick look back at the history that made today's modern multiplexing possible.&lt;/li&gt;
            &lt;li&gt;First, his article starts the way all good ones do, presenting the problem in silent-movie form:&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;In mid-1960's time sharing was still a recent invention. Compared to a previous paradigm - batch-processing - time sharing was truly revolutionary. It greatly reduced the time wasted between writing a program and getting its result. Batch-processing meant hours and hours of waiting often to only see a program error. See this film to better understand the problems of 1960's programmers: &quot;The trials and tribulations of batch processing&quot;.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;Enter the wild world of the 1970's, and we've now reached the birth of UNIX which tried to solve the batch processing problem with time-sharing.&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;These days when a program was executed, it could &quot;stall&quot; (block) only on a couple of things1:
            + wait for CPU
            + wait for disk I/O
            + wait for user input (waiting for a shell command) or console (printing data too fast)&quot;&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;Jump forward another dozen years or so, and the world changes yet again:&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;This all changed in 1983 with the release of 4.2BSD. This revision introduced an early implementation of a TCP/IP stack and most importantly - the BSD Sockets API.Although today we take the BSD sockets API for granted, it wasn't obvious it was the right API. STREAMS were a competing API design on System V Revision 3.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;Coming in along with the sockets API was the select(2) call, which our very own Kirk McKusick gives us some background on:&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;Select was introduced to allow applications to multiplex their I/O.&lt;/p&gt;

            &lt;p&gt;Consider a simple application like a remote login. It has descriptors for reading from and writing to the terminal and a descriptor for the (bidirectional) socket. It needs to read from the terminal keyboard and write those characters to the socket. It also needs to read from the socket and write to the terminal. Reading from a descriptor that has nothing queued causes the application to block until data arrives. The application does not know whether to read from the terminal or the socket and if it guesses wrong will incorrectly block. So select was added to let it find out which descriptor had data ready to read. If neither, select blocks until data arrives on one descriptor and then awakens telling which descriptor has data to read.&lt;/p&gt;

            &lt;p&gt;[...] Non-blocking was added at the same time as select. But using non-blocking when reading descriptors does not work well. Do you go into an infinite loop trying to read each of your input descriptors? If not, do you pause after each pass and if so for how long to remain responsive to input? Select is just far more efficient.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;p&gt;Select also lets you create a single inetd daemon rather than having to have a separate daemon for every service.&lt;/p&gt;

            &lt;ul&gt;
            &lt;li&gt;The article then wraps up with an interesting conclusion:
            &amp;gt; CSP = Communicating sequential processes&lt;/li&gt;
            &lt;/ul&gt;

            &lt;blockquote&gt;
            &lt;p&gt;In this discussion I was afraid to phrase the core question. Were Unix processes intended to be CSP-style processes? Are file descriptors a CSP-derived &quot;channels&quot;? Is select equivalent to ALT statement?&lt;/p&gt;

            &lt;p&gt;I think: no. Even if there are design similarities, they are accidental. The file-descriptor abstractions were developed well before the original CSP paper.&lt;/p&gt;

            &lt;p&gt;It seems that an operating socket API's evolved totally disconnected from the userspace CSP-alike programming paradigms. It's a pity though. It would be interesting to see an operating system coherent with the programming paradigms of the user land programs.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;ul&gt;
            &lt;li&gt;A long (but good) read, and worth your time if you are interested in the history how modern multiplexing came to be.&lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h3&gt;&lt;a href=&quot;https://intellij-support.jetbrains.com/hc/en-us/articles/206525024-How-to-start-CLion-on-FreeBSD&quot;&gt;How to start CLion on FreeBSD?&lt;/a&gt;&lt;/h3&gt;

            &lt;ul&gt;
            &lt;li&gt;CLion (pronounced &quot;sea lion&quot;) is a cross-platform C and C++ IDE&lt;/li&gt;
            &lt;li&gt;By default, the Linux version comes bundled with some binaries, which obviously won't work with the native FreeBSD build&lt;/li&gt;
            &lt;li&gt;Rather than using Linux emulation, you can replace these components with native versions

            &lt;ul&gt;
            &lt;li&gt;pkg install openjdk8 cmake gdb&lt;/li&gt;
            &lt;li&gt;Edit clion-2016.3/bin/idea.properties and change run.processes.with.pty=false&lt;/li&gt;
            &lt;li&gt;Start CLion and open Settings | Build, Execution, Deployment | Toolchains&lt;/li&gt;
            &lt;li&gt;Specify CMake path: /usr/local/bin/cmake and GDB path: /usr/local/bin/gdb&lt;/li&gt;
            &lt;/ul&gt;&lt;/li&gt;
            &lt;li&gt;Without a replacement for fsnotifier, you will get a warning that the IDE may be slow to detect changes to files on disk&lt;/li&gt;
            &lt;li&gt;But, someone has already written a version of fsnotifier that works on FreeBSD and OpenBSD&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/idea4bsd/fsnotifier&quot;&gt;fsnotifier for OpenBSD and FreeBSD&lt;/a&gt; -- The fsnotifier is used by IntelliJ for detecting file changes. This version supports FreeBSD and OpenBSD via libinotify and is a replacement for the bundled Linux-only version coming with the IntelliJ IDEA Community Edition.&lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h2&gt;Beastie Bits&lt;/h2&gt;

            &lt;ul&gt;
            &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.trueos.org/trueos-pico/&quot;&gt;TrueOS Pico – FreeBSD ARM/RPi Thin Clients&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/xaque208/puppet-pkgng&quot;&gt;A Puppet package provider for FreeBSD's PkgNG package manager.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://mailman.uk.freebsd.org/pipermail/ukfreebsd/2016-November/014059.html&quot;&gt;Notes from November London *BSD meetup&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://lists.nycbug.org/pipermail/semibug/2016-November/000131.html&quot;&gt;SemiBug meeting on Dec 20th&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;h2&gt;Feedback/Questions&lt;/h2&gt;

            &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;http://pastebin.com/SMvxur9v&quot;&gt; Erno - SSH without password&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;http://pastebin.com/5ETL7nmj&quot;&gt; Jonathan - Magical ZFS&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;http://pastebin.com/tSVvaV9e&quot;&gt; George - TrueOS&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;http://pastebin.com/T8nUexd1&quot;&gt; Mohammad - Jails IP&lt;/a&gt; &lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;http://pastebin.com/YssXXp70&quot;&gt; Gibheer - BEs&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;

            &lt;hr&gt;

            &lt;ul&gt;
            &lt;li&gt;Send questions, comments, show ideas/topics, or stories you want mentioned on the show to &lt;a href=&quot;mailto:feedback@bsdnow.tv&quot;&gt;feedback@bsdnow.tv&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
        </content>
    </entry>
</feed>
