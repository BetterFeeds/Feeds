<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:smi="https://www.betterfeeds.org/series-media-info/1" xmlns:media="http://search.yahoo.com/mrss/" xmlns:psc="http://podlove.org/simple-chapters" xml:lang="en-us">
    <title>BSD Now</title>
    <subtitle>A weekly show covering the latest developments in the world of the BSD family of operating systems. News, Tutorials and Interviews for new users and long time developers alike.</subtitle>
    <icon>http://www.jupiterbroadcasting.com/images/bsdnow-badge.jpg</icon>
    <link href="http://www.bsdnow.tv/" rel="alternate" type="text/html"/>
    <link href="https://feeds.betterfeeds.org/bsdnow.atom" rel="first" type="application/atom+xml; charset=utf-8"/>
    <link href="https://feeds.betterfeeds.org/bsdnow/bsdnow-2013-09.atom" rel="last" type="application/atom+xml; charset=utf-8"/>
    <link href="https://itunes.apple.com/us/podcast/bsd-now-mp3/id701045710" rel="archives" type="text/html" title="iTunes - Audio"/>
    <link href="https://itunes.apple.com/cn/podcast/bsd-now-hd/id850665429" rel="archives" type="text/html" title="iTunes - Video"/>
    <link href="https://www.youtube.com/user/jupiterbroadcasting/videos" rel="archives" type="text/html" title="YouTube"/>
    <link href="http://feeds.feedburner.com/BsdNowMp3" rel="archives" type="application/rss+xml" title="BSD Now MP3 Audio"/>
    <link href="http://feeds.feedburner.com/BsdNowOgg" rel="archives" type="application/rss+xml" title="BSD Now OGG Audio"/>
    <link href="http://feeds.feedburner.com/BsdNowMobile" rel="archives" type="application/rss+xml" title="BSD Now SD Video"/>
    <link href="http://feeds.feedburner.com/BsdNowHd" rel="archives" type="application/rss+xml" title="BSD Now HD Video"/>
    <link href="http://bitlove.org/jupiterbroadcasting/bsdnowhd/feed" rel="archives" type="application/rss+xml" title="BSD Now HD Video (BitTorrent)"/>
    <link href="https://feeds.betterfeeds.org/bsdnow.atom" rel="self" type="application/atom+xml; charset=utf-8" title="BSD Now"/>
    <link href="https://feeds.betterfeeds.org/bsdnow/bsdnow-2017-02.atom" rel="next" type="application/atom+xml; charset=utf-8"/>
    <id>http://www.bsdnow.tv/</id>
    <updated>2017-03-15T07:59:00Z</updated>
    <smi:sequential>false</smi:sequential>
    <author>
        <name>Allan Jude</name>
        <email>allan@jupiterbroadcasting.com</email>
        <uri>https://twitter.com/allanjude</uri>
    </author>
    <author>
        <name>Kris Moore</name>
        <email>kris@pcbsd.org</email>
        <uri>https://twitter.com/pcbsdkris</uri>
    </author>
    <entry>
        <title>Tokyo Dreaming</title>
        <smi:episode>184</smi:episode>
        <link rel="alternate" type="text/html" href="http://www.bsdnow.tv/episodes/2017_03_08-tokyo_dreaming"/>
        <id>http://www.bsdnow.tv/episodes/2017_03_08-tokyo_dreaming</id>
        <published>2017-02-08T03:48:46-08:00</published>
        <updated>2017-03-15T07:53:00Z</updated>
        <link length="45765998" href="http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/jnite/bsd-0184.mp3" type="audio/mpeg" rel="enclosure"/>
        <media:group>
            <media:content fileSize="45765998" duration="5697" url="http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/jnite/bsd-0184.mp3" type="audio/mpeg" medium="audio" isDefault="true"/>
            <media:content fileSize="69593150" duration="5697" url="http://www.podtrac.com/pts/redirect.ogg/traffic.libsyn.com/jnite/bsd-0184.ogg" type="audio/ogg" medium="audio" isDefault="false"/>
            <media:content fileSize="332441489" duration="5697" url="http://www.podtrac.com/pts/redirect.mp4/201406.jb-dl.cdn.scaleengine.net/bsdnow/2017/bsd-0184-432p.mp4" type="video/mp4" medium="video" isDefault="false"/>
            <media:content fileSize="641512572" duration="5697" url="http://www.podtrac.com/pts/redirect.mp4/201406.jb-dl.cdn.scaleengine.net/bsdnow/2017/bsd-0184.mp4" type="video/mp4" medium="video" isDefault="false"/>
            <media:content fileSize="641512572" duration="5697" url="http://bitlove.org/jupiterbroadcasting/bsdnowhd/bsd-0184.mp4.torrent" type="application/x-bittorrent; enclosed=&quot;video/mp4&quot;" medium="video" isDefault="false"/>
            <media:content fileSize="80038" url="http://www.jupiterbroadcasting.com/wp-content/uploads/2017/03/bsd-0184-v.jpg" type="image/jpg" medium="image" width="854" height="506"/>
        </media:group>
        <contributor>
            <name>JT</name>
            <uri>https://twitter.com/q5sys</uri>
        </contributor>
        <summary>This week on BSDNow, Allan &amp; Kris are in Tokyo for AsiaBSDCon, but not to worry, we have a full episode lined up and ready to go. Hackathon reports from OpenBSD, NetBSD reproducible builds, C programming &amp; more! Stay tuned for your place to B...SD!</summary>
        <content type="html">&lt;h1&gt;Episode 184: Tokyo Dreaming&lt;/h1&gt;
&lt;h2&gt;Headlines&lt;/h2&gt;

&lt;h3&gt;OpenBSD A2k17 hackathon reports&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://undeadly.org/cgi?action=article&amp;amp;sid=20170131101827"&gt;a2k17 hackathon report: Patrick Wildt on the arm64 port&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://undeadly.org/cgi?action=article&amp;amp;sid=20170203232049"&gt;a2k17 hackathon report: Antoine Jacoutot on syspatch, rc.d improvements and more&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://undeadly.org/cgi?action=article&amp;amp;sid=20170127154356"&gt;a2k17 hackathon report: Martin Pieuchot on NET_LOCK and much more &lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://undeadly.org/cgi?action=article&amp;amp;sid=20170127031836"&gt;a2k17 hackathon report: Kenneth Westerback on the hidden wonders of the build system, the network stack and more &lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://undeadly.org/cgi?action=article&amp;amp;sid=20170125225403"&gt;a2k17 hackathon report: Bob Beck on LibreSSL progress and more &lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3&gt;&lt;a href="https://blog.netbsd.org/tnf/entry/netbsd_fully_reproducible_builds"&gt;NetBSD is now reproducible &lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Christos Zoulas posts to the NetBSD blog that he has completed his project to make fully reproducible NetBSD builds for amd64 and sparc64&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;I have been working on and off for almost a year trying to get reproducible builds (the same source tree always builds an identical cdrom) on NetBSD. I did not think at the time it would take as long or be so difficult, so I did not keep a log of all the changes I needed to make. I was also not the only one working on this. Other NetBSD developers have been making improvements for the past 6 years. I would like to acknowledge the NetBSD build system (aka build.sh) which is a fully portable cross-build system. This build system has given us a head-start in the reproducible builds work.&lt;/p&gt;
  
  &lt;p&gt;I would also like to acknowledge the work done by the Debian folks who have provided a platform to run, test and analyze reproducible builds. Special mention to the diffoscope tool that gives an excellent overview of what's different between binary files, by finding out what they are (and if they are containers what they contain) and then running the appropriate formatter and diff program to show what's different for each file.&lt;/p&gt;
  
  &lt;p&gt;Finally other developers who have started, motivated and did a lot of work getting us here like Joerg Sonnenberger and Thomas Klausner for their work on reproducible builds, and Todd Vierling and Luke Mewburn for their work on build.sh.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Some of the stumbling blocks that were overcome:

&lt;ul&gt;
&lt;li&gt;Timestamps&lt;/li&gt;
&lt;li&gt;Date/time/author embedded in source files&lt;/li&gt;
&lt;li&gt;Timezone sensitive code&lt;/li&gt;
&lt;li&gt;Directory order / build order&lt;/li&gt;
&lt;li&gt;Non-sanitized data stored in files&lt;/li&gt;
&lt;li&gt;Symbolic links / paths&lt;/li&gt;
&lt;li&gt;General tool inconsistencies: including gcc profiling, the fact that GPT partition tables, are by definition, globally unique each time they are created, and the iso9660 standard calls for a timestamp with a timezone.&lt;/li&gt;
&lt;li&gt;Toolchain&lt;/li&gt;
&lt;li&gt;Build information / tunables / environment. NetBSD now has a knob ‘MKREPRO’, if set to YES it sets a long list of variables to a consistent set of a values.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The post walks through how these problems where solves&lt;/li&gt;
&lt;li&gt;Future Work:

&lt;ul&gt;
&lt;li&gt;Vary more parameters and find more inconsistencies&lt;/li&gt;
&lt;li&gt;Verify that cross-building is reproducible&lt;/li&gt;
&lt;li&gt;Verify that unprivileged builds are reproducible&lt;/li&gt;
&lt;li&gt;Test on other platforms&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3&gt;&lt;a href="http://www.tedunangst.com/flak/post/features-are-faults-redux"&gt;Features are faults redux&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;From Ted Unangst&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Last week I gave a talk for the security class at Notre Dame based on features are faults but with some various commentary added. It was an exciting trip, with the opportunity to meet and talk with the computer vision group as well. Some other highlights include the Indiana skillet I had for breakfast, which came with pickles and was amazing, and explaining the many wonders of cvs to the Linux users group over lunch. After that came the talk, which went a little something like this.&lt;/p&gt;
  
  &lt;p&gt;I got started with OpenBSD back about the same time I started college, although I had a slightly different perspective then. I was using OpenBSD because it included so many security features, therefore it must be the most secure system, right? For example, at some point I acquired a second computer. What’s the first thing anybody does when they get a second computer? That’s right, set up a kerberos domain. The idea that more is better was everywhere. This was also around the time that ipsec was getting its final touches, and everybody knew ipsec was going to be the most secure protocol ever because it had more options than any other secure transport. We’ll revisit this in a bit.&lt;/p&gt;
  
  &lt;p&gt;There’s been a partial attitude adjustment since then, with more people recognizing that layering complexity doesn’t result in more security. It’s not an additive process. There’s a whole talk there, about the perfect security that people can’t or won’t use. OpenBSD has definitely switched directions, including less code, not more. All the kerberos code was deleted a few years ago.&lt;/p&gt;
  
  &lt;p&gt;Let’s assume about one bug per 100 lines of code. That’s probably on the low end. Now say your operating system has 100 million lines of code. If I’ve done the math correctly, that’s literally a million bugs. So that’s one reason to avoid adding features. But that’s a solveable problem. If we pick the right language and the right compiler and the right tooling and with enough eyeballs and effort, we can fix all the bugs. We know how to build mostly correct software, we just don’t care.&lt;/p&gt;
  
  &lt;p&gt;As we add features to software, increasing its complexity, new unexpected behaviors start to emerge. What are the bounds? How many features can you add before craziness is inevitable? We can make some guesses. Less than a thousand for sure. Probably less than a hundred? Ten maybe? I’ll argue the answer is quite possibly two. Interesting corollary is that it’s impossible to have a program with exactly two features. Any program with two features has at least a third, but you don’t know what it is&lt;/p&gt;
  
  &lt;p&gt;My first example is a bug in the NetBSD ftp client. We had one feature, we added a second feature, and just like that we got a &lt;a href="http://marc.info/?l=oss-security&amp;amp;m=141451507810253&amp;amp;w=2"&gt;third misfeature&lt;/a&gt;&lt;/p&gt;
  
  &lt;p&gt;Our story begins long ago. The origins of this bug are probably older than I am. In the dark times before the web, FTP sites used to be a pretty popular way of publishing files. You run an ftp client, connect to a remote site, and then you can browse the remote server somewhat like a local filesystem. List files, change directories, get files. Typically there would be a README file telling you what’s what, but you don’t need to download a copy to keep. Instead we can pipe the output to a program like more. Right there in the ftp client. No need to disconnect.&lt;/p&gt;
  
  &lt;p&gt;Fast forward a few decades, and http is the new protocol of choice. http is a much less interactive protocol, but the ftp client has some handy features for batch downloads like progress bars, etc. So let’s add http support to ftp. This works pretty well. Lots of code reused.&lt;/p&gt;
  
  &lt;p&gt;http has one quirk however that ftp doesn’t have. Redirects. The server can redirect the client to a different file. So now you’re thinking, what happens if I download http://somefile and the server sends back 302 http://|reboot. ftp reconnects to the server, gets the 200, starts downloading and saves it to a file called |reboot. Except it doesn’t. The function that saves files looks at the first character of the name and if it’s a pipe, runs that command instead. And now you just rebooted your computer. Or worse.&lt;/p&gt;
  
  &lt;p&gt;It’s pretty obvious this is not the desired behavior, but where exactly did things go wrong? Arguably, all the pieces were working according to spec. In order to see this bug coming, you needed to know how the save function worked, you needed to know about redirects, and you needed to put all the implications together.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;The post then goes into a lot more detail about other issues. We just don’t have time to cover it all today, but you should go read it, it is very enlightening&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;What do we do about this? That’s a tough question. It’s much easier to poke fun at all the people who got things wrong. But we can try. My attitudes are shaped by experiences with the OpenBSD project, and I think we are doing a decent job of containing the complexity. Keep paring away at dependencies and reducing interactions. As a developer, saying “no” to all feature requests is actually very productive. It’s so much faster than implementing the feature. Sometimes users complain, but I’ve often received later feedback from users that they’d come to appreciate the simplicity.&lt;/p&gt;
  
  &lt;p&gt;There was a question about which of these vulnerabilities were found by researchers, as opposed to troublemakers. The answer was most, if not all of them, but it made me realize one additional point I hadn’t mentioned. Unlike the prototypical buffer overflow vulnerability, exploiting features is very reliable. Exploiting something like shellshock or imagetragick requires no customized assembly and is independent of CPU, OS, version, stack alignment, malloc implementation, etc. Within about 24 hours of the initial release of shellshock, I had logs of people trying to exploit it. So unless you’re on about a 12 hour patch cycle, you’re going to have a bad time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;h3&gt;&lt;a href="https://svnweb.freebsd.org/changeset/base/314048"&gt;reimplement zfsctl (.zfs) support&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;avg@ (Andriy Gapon) has rewritten the .zfs support in FreeBSD&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The current code is written on top of GFS, a library with the generic support for writing filesystems, which was ported from Illumos. Because of significant differences between illumos VFS and FreeBSD VFS models, both the GFS and zfsctl code were heavily modified to work on FreeBSD.  Nonetheless, they still contain quite a few ugly hacks and bugs.&lt;/p&gt;
  
  &lt;p&gt;This is a reimplementation of the zfsctl code where the VFS-specific bits are written from scratch and only the code that interacts with the rest of ZFS is reused.&lt;/p&gt;
  
  &lt;p&gt;Some ideas are picked from an independent work by Will (wca@)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;This work improves the overall quality of the ZFS port to FreeBSD&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The code that provides support for ZFS .zfs/ directory functionality has been reimplemented.  It is no longer possible to create a snapshot by mkdir under .zfs/snapshot/.  That should be the only user visible change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TIL: On IllumOS, you can create, rename, and destroy snapshots, by manipulating the virtual directories in the .zfs/snapshots directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If enough people would find this feature useful, maybe it could be implemented (rm and rename have never existed on FreeBSD). At the same time, it seems like rather a lot of work, when the ZFS command line tools work so well. Although wca@ pointed out on IRC, it can be useful to be able to create a snapshot over NFS, or SMB.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2&gt;Interview - Konrad Witaszczyk - &lt;a href="mailto:def@freebsd.org"&gt;def@freebsd.org&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Encrypted Kernel Crash Dumps&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2&gt;News Roundup&lt;/h2&gt;

&lt;h3&gt;&lt;a href="https://svnweb.freebsd.org/changeset/base/313962"&gt;PBKDF2 Performance improvements on FreeBSD&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jbp.io/2015/08/11/pbkdf2-performance-matters/"&gt;Joe Pixton did some research&lt;/a&gt; and found that, because of the way the spec is written, most PBKDF2 implementations are 2x slower than they need to be.&lt;/li&gt;
&lt;li&gt;Since the PBKDF is used to derive a key, used for encryption, this poses a problem. The attacker can derive a key twice as fast as you can. On FreeBSD the PBKDF2 was configured to derive a SHA512-HMAC key that would take approximately 2 seconds to calculate. That is 2 seconds on one core. So an attacker can calculate the same key in 1 second, and use many cores.&lt;/li&gt;
&lt;li&gt;Luckily, 1 second is still a long time for each brute force guess. On modern CPUs with the fast algorithm, you can do about 500,000 iterations of PBKDF per second (per core).&lt;/li&gt;
&lt;li&gt;Until a recent change, OpenBSD used only 8192 iterations. It now uses a similar benchmark of ~2 seconds, and uses bcrypt instead of a SHA1-HMAC.&lt;/li&gt;
&lt;li&gt;Joe’s research showed that the majority of implementations were done the ‘slow’ way. Calculating the initial part of the outer round each iteration, instead of reusing the initial calculation over and over for each round.&lt;/li&gt;
&lt;li&gt;Joe submitted a match to FreeBSD to solve this problem. That patch was improved, and a test of tests were added by jmg@, but then work stalled&lt;/li&gt;
&lt;li&gt;I picked up the work, and fixed some merge conflicts in the patch that had cropped up based on work I had done that moved the HMAC code to a separate file.&lt;/li&gt;
&lt;li&gt;This work is now committed.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;With this change, all newly generated GELI keys will be approximately 2x as strong. Previously generated keys will take half as long to calculate, resulting in faster mounting of encrypted volumes. Users may choose to rekey, to generate a new key with the larger default number of iterations using the geli(8) setkey command. Security of existing data is not compromised, as ~1 second per brute force attempt is still a very high threshold.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;If you are interested in the topic, I recommend the video of Joe’s presentation from the Passwords15 conference in Las Vegas&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3&gt;&lt;a href="https://www.trueos.org/blog/quick-updating-screenshot-trueos-handbook/"&gt;Quick How-To: Updating a screenshot in the TrueOS Handbook&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Docs writers, might be time to pay attention. This week we have a good walk-through of adding / updating new screenshots to the TrueOS Sphinx Documentation.&lt;/li&gt;
&lt;li&gt;For those who have not looked in the past, TrueOS and FreeNAS both have fantastic docs by the team over at iXsystems using Sphinx as their doc engine. &lt;/li&gt;
&lt;li&gt;Often we get questions from users asking what “they can do to help” but don’t necessarily have programming skills to apply. &lt;/li&gt;
&lt;li&gt;The good news is that using Sphinx is relatively easy, and after learning some minio rst syntax you can easily help fix, or even contribute to new sections of the TrueOS (Or FreeNAS) documentation. &lt;/li&gt;
&lt;li&gt;In this example, Tim takes us through the process of replacing an old out of date screenshot in the handbook with the latest hotness. &lt;/li&gt;
&lt;li&gt;Starting with a .png file, he then locates the old screenshot name and adds the updated version “lumina-e.png” to “lumina-f.png”. With the file added to the tree, the relevant section of .rst code can be adjusted and the sphinx build run to verify the output HTML looks correct.&lt;/li&gt;
&lt;li&gt;Using this method you can easily start to get involved with other aspects of documentation and next thing you know you’ll be writing boot-loaders like Allan!&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3&gt;&lt;a href="https://www.ossblog.org/learn-c-programming-with-9-excellent-open-source-books/"&gt;Learn C Programming With 9 Excellent Open Source Books&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Now that you’ve easily mastered all your documentation skills, you may be ready to take on a new challenge. (Come on, that boot-loader isn’t going to write itself!)&lt;/li&gt;
&lt;li&gt;We wanted to point out some excellent resources to get you started on your journey into writing C.&lt;/li&gt;
&lt;li&gt;Before you think, “oh, more books to purchase”, wait there’s good news. These are the top-9 open-source books that you can download in digital form free of charge. Now I bet we got your attention.&lt;/li&gt;
&lt;li&gt;We start the rundown with “The C Book”, by Mike Banahan, Declan Brady and Mark Doran, which will lay the groundwork with your introduction into the C language and concepts. &lt;/li&gt;
&lt;li&gt;Next up, if you are going to do anything, do it with style, so take a read through the “C Elements of Style” which will make you popular at all the parties. (We can’t vouch for that statement)&lt;/li&gt;
&lt;li&gt;From here we have a book on using C to build your own minimal “lisp” interpreter, reference guides on GNU C and some other excellent introduction / mastery books to help round-out your programming skill set.&lt;/li&gt;
&lt;li&gt;Your C adventure awaits, hopefully these books can not only teach you good C, but also make you feel confident when looking at bits of the FreeBSD world or kernel with a proper foundation to back it up.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3&gt;&lt;a href="http://eradman.com/posts/linuxvm-on-openbsd.html"&gt;Running a Linux VM on OpenBSD&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Over the past few years we’ve talked a lot about Virtualization, Bhyve or OpenBSD’s ‘vmm’, but qemu hasn’t gotten much attention.&lt;/li&gt;
&lt;li&gt;Today we have a blog post with details on how to deploy qemu to run Linux on top of an OpenBSD host system.&lt;/li&gt;
&lt;li&gt;The starts by showing us how to first provision the storage for qemu, using the handy ‘qemu-img’ command, which in this example only creates a 4GB disk, you’ll probably want more for real-world usage though.&lt;/li&gt;
&lt;li&gt;Next up the qemu command will be run, pay attention to the particular flags for network and memory setup. You’ll probably want to bump it up past the recommended 256M of memory.&lt;/li&gt;
&lt;li&gt;Networking is always the fun part, as the author describes his intended setup&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;I want OpenBSD and Debian to be able to obtain an IP via DHCP on their wired interfaces and I don't want external networking required for an NFS share to the VM. To accomplish this I need two interfaces since dhclient will erase any other IPv4 addresses already assigned. We can't assign an address directly to the bridge, but we can configure a virtual Ethernet device and add it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;The setup for this portion involves touching a few more files, but isn’t that painless. Some “pf” rules to enable NAT for and dhcpd setup to assign a “fixed” IP to the vm will get us going, along with some additional details on how to configure the networking for inside the debian VM.&lt;/li&gt;
&lt;li&gt;Once those steps are completed you should be able to mount NFS and share data from the host to the VM painlessly. &lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2&gt;Beastie Bits&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.macobserver.com/podcasts/background-mode-jordan-hubbard/"&gt;MacObserver: Interview with Open Source Developer &amp;amp; Former Apple Manager Jordan Hubbard &lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freebsdfoundation.org/blog/2016-google-summer-of-code-mentor-summit-and-meetbsd-trip-report-gavin-atkinson/"&gt;2016 Google Summer of Code Mentor Summit and MeetBSD Trip Report: Gavin Atkinson&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2&gt;Feedback/Questions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pastebin.com/TNyHBYwT"&gt; Joe - BGP / Vultr Followup&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://pastebin.com/s4Ypezsz"&gt; Ryan Moreno asks about Laptops &lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;Send questions, comments, show ideas/topics, or stories you want mentioned on the show to &lt;a href="mailto:feedback@bsdnow.tv"&gt;feedback@bsdnow.tv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
        </content>
    </entry>
    <entry>
        <title>Getting Steamy Here</title>
        <smi:episode>183</smi:episode>
        <link rel="alternate" type="text/html" href="http://www.bsdnow.tv/episodes/2017_03_01-getting_steamy_here"/>
        <id>http://www.bsdnow.tv/episodes/2017_03_01-getting_steamy_here</id>
        <published>2017-02-28T22:25:18-08:00</published>
        <updated>2017-03-15T07:40:00Z</updated>
        <link length="34238266" href="http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/jnite/bsd-0183.mp3" type="audio/mpeg" rel="enclosure"/>
        <media:group>
            <media:content fileSize="34238266" duration="4256" url="http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/jnite/bsd-0183.mp3" type="audio/mpeg" medium="audio" isDefault="true"/>
            <media:content fileSize="55356571" duration="4256" url="http://www.podtrac.com/pts/redirect.ogg/traffic.libsyn.com/jnite/bsd-0183.ogg" type="audio/ogg" medium="audio" isDefault="false"/>
            <media:content fileSize="234541653" duration="4256" url="http://www.podtrac.com/pts/redirect.mp4/201406.jb-dl.cdn.scaleengine.net/bsdnow/2017/bsd-0183-432p.mp4" type="video/mp4" medium="video" isDefault="false"/>
            <media:content fileSize="479349265" duration="4256" url="http://www.podtrac.com/pts/redirect.mp4/201406.jb-dl.cdn.scaleengine.net/bsdnow/2017/bsd-0182.mp4" type="video/mp4" medium="video" isDefault="false"/>
            <media:content fileSize="479349265" duration="4256" url="http://bitlove.org/jupiterbroadcasting/bsdnowhd/bsd-0183.mp4.torrent" type="application/x-bittorrent; enclosed=&quot;video/mp4&quot;" medium="video" isDefault="false"/>
            <media:content fileSize="84164" url="http://www.jupiterbroadcasting.com/wp-content/uploads/2017/02/bsd-0183b-v.jpg" type="image/jpg" medium="image" width="854" height="506"/>
        </media:group>
        <contributor>
            <name>JT</name>
            <uri>https://twitter.com/q5sys</uri>
        </contributor>
        <summary>This week on BSDNow, we have “Weird Unix Things”, “Is it getting Steamy in here?” &amp; an Interview about BSD Sockets API. (Those aren’t all related). It’s going to be a good one, buckle up for your place to B...SD!</summary>
        <content type="html">&lt;h1&gt;Episode 183: Getting Steamy Here&lt;/h1&gt;
&lt;h2&gt;Headlines&lt;/h2&gt;

&lt;h3&gt;&lt;a href="https://www.trueos.org/blog/playonbsd-trueos-getting-steamy-ive-much-wine/"&gt;playonbsd with TrueOS: It’s Getting Steamy in Here and I’ve Had Too Much Wine&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;We’ve done a couple of tutorials in the past on using Steam and Wine with PC-BSD, but now with the addition of playonbsd to the AppCafe library, you have more options than ever before to game on your TrueOS system.  We’re going to have a look today at playonbsd, how it works with TrueOS, and what you can expect if you want to give it a try on your own system.  Let’s dive right in!&lt;/p&gt;
  
  &lt;p&gt;Once playonbsd is installed, go back to your blank desktop, right-click on the wallpaper, and select terminal.  Playonbsd does almost all the configuring for you, but there are still a couple of simple options you’ll want to configure to give yourself the best experience.  In your open terminal, type: playonbsd.  You can also find playonbsd by doing a fast search using Lumina’s built-in search function in the start menu after it’s been installed.  Once opened,  a graphical interface greets us with easy to navigate menus and even does most of the work for you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;A nice graphical UI that hides the complexity of setting up WINE and Steam, and lets you pick select the game you want, and get it setup&lt;/li&gt;
&lt;li&gt;Start gaming quicker, without the headache&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re a PC gamer, you should definitely give playonbsd a try!  You may be surprised at how well it works.  If you want to know ahead of time if your games are well supported or not, head on over to WineHQ and do a search.  Many people have tested and provided feedback and even solutions for potential problems with a large variety of video games. This is a great resource if you run into a glitch or other problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;h3&gt;&lt;a href="https://jvns.ca/blog/2017/02/08/weird-unix-things-cd/"&gt;Weird Unix thing: 'cd //'&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;So why can you do ‘cd //tmp’, and it isn’t the same as ‘cd /tmp’?&lt;/li&gt;
&lt;li&gt;The spec says:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;An implementation may further simplify curpath by removing any trailing &lt;slash&gt; characters that are not also leading &lt;slash&gt; characters, replacing multiple non-leading consecutive &lt;slash&gt; characters with a single &lt;slash&gt;, and replacing three or more leading &lt;slash&gt; characters with a single &lt;slash&gt;. If, as a result of this canonicalization, the curpath variable is null, no further steps shall be taken.&lt;/slash&gt;&lt;/slash&gt;&lt;/slash&gt;&lt;/slash&gt;&lt;/slash&gt;&lt;/slash&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;“So! We can replace “three or more leading / characters with a single slash”. That does not say anything about what to do when there are 2 / characters though, which presumably is why cd //tmp leaves you at //tmp.”&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;A pathname that begins with two successive slashes may be interpreted in an implementation-defined manner&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;So what is it for? Well, the blog did a bit of digging and came up with &lt;a href="http://unix.stackexchange.com/questions/256497/on-what-systems-is-foo-bar-different-from-foo-bar/256569#256569"&gt;this stackoverflow answer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In cygwin and some other systems // is treated as a unix-ified version of \, to access UNC windows file sharing paths like \server\share&lt;/li&gt;
&lt;li&gt;Perforce, the vcs, uses // to denote a path relative to the depot&lt;/li&gt;
&lt;li&gt;It seems to have been used in the path for a bunch of different network file systems, but also for myriad other things&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3&gt;&lt;a href="https://arstechnica.com/apple/2017/02/testing-out-snapshots-in-apples-next-generation-apfs-file-system/"&gt;Testing out snapshots in Apple’s next-generation APFS file system&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Adam Leventhal takes his DTrace hammer to Apple’s new file system to see what is going on&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Back in June, Apple announced its new upcoming file system: APFS, or Apple File System. There was no mention of it in the WWDC keynote, but devotees needed no encouragement. They picked over every scintilla of data from the documentation on Apple’s developer site, extrapolating, interpolating, eager for whatever was about to come. In the WWDC session hall, the crowd buzzed with a nervous energy, eager for the grand unveiling of APFS. I myself badge-swapped my way into the conference just to get that first glimpse of Apple’s first original filesystem in the 30+ years since HFS&lt;/p&gt;
  
  &lt;p&gt;Apple’s presentation didn’t disappoint the hungry crowd. We hoped for a modern filesystem, optimized for next generation hardware, rich with features that have become the norm for data centers and professionals. With APFS, Apple showed a path to meeting those expectations. Dominic Giampaolo and Eric Tamura, leaders of the APFS team, shared performance optimizations, data integrity design, volume management, efficient storage of copied data, and snapshots—arguably the feature of APFS most directly in the user’s control.&lt;/p&gt;
  
  &lt;p&gt;It’s 2017, and Apple already appears to be making good on its promise with the revelation that the forthcoming iOS 10.3 will use APFS. The number of APFS tinkerers using it for their personal data has instantly gone from a few hundred to a few million. Beta users of iOS 10.3 have already made the switch apparently without incident. They have even ascribed unscientifically-significant performance improvements to APFS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Previously Adam had used DTrace to find a new syscall introduced in OS X, fs_snapshot, but he had not dug into how to use it. Now it seems, the time has come&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Learning from XNU and making some educated guesses, I wrote my first C program to create an APFS snapshot. This section has a bit of code, which you can find in &lt;a href="https://github.com/ahl/apfs"&gt;this Github repo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;That just returned “fs_snapshot: Operation not permitted”&lt;/li&gt;
&lt;li&gt;So, being Adam, he used DTrace to figure out what the problem was&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Running this DTrace script in one terminal while running the snapshot program in another shows the code flow through the kernel as the program executes&lt;/p&gt;
  
  &lt;p&gt;In the code flow, the priv&lt;em&gt;check&lt;/em&gt;cred() function jumps out as a good place to continue because of its name, the fact that fs_snapshot calls it directly, and the fact that it returns 1 which corresponds with EPERM, the error we were getting.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Turns out, it just requires some sudo&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;With a little more testing I wrote my own version of Apple's unreleased snapUtil command from the WWDC demo&lt;/p&gt;
  
  &lt;p&gt;We figured out the proper use of the fs&lt;em&gt;snapshot system call and reconstructed the WWDC snapUtil. But all this time an equivalent utility has been lurking on macOS Sierra. If you look in /System/Library/Filesystems/apfs.fs/Contents/Resources/, Apple has included a number of APFS-related utilities, including apfs&lt;/em&gt;snapshot (and, tantalizingly, a tool called hfs_convert).&lt;/p&gt;
  
  &lt;p&gt;Snapshots let you preserve state to later peruse; we can also revert an APFS volume to a previous state to restore its contents. The current APFS semantics around rollback are a little odd. The revert operation succeeds, but it doesn't take effect until the APFS volume is next mounted&lt;/p&gt;
  
  &lt;p&gt;Another reason Apple may not have wanted people messing around with snapshots is that the feature appears to be incomplete. Winding yourself into a state where only a reboot can clear a mounted snapshot is easy, and using snapshots seems to break some of the diskutil APFS output&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;It is interesting to see what you can do with DTrace, as well as to see what a DTrace and ZFS developer things of APFS&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2&gt;Interview - Tom Jones - &lt;a href="mailto:tj@enoti.me"&gt;tj@enoti.me&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Replacing the BSD Sockets API&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2&gt;News Roundup&lt;/h2&gt;

&lt;h3&gt;&lt;a href="https://github.com/eborisch/ethname"&gt;FreeBSD rc.d script to map ethernet device names by MAC address&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Self-contained FreeBSD rc.d script for re-naming devices based on their MAC address. I needed it due to USB Ethernet devices coming up in different orders across OS upgrades.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Copy ethname into /usr/local/etc/rc.d/&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the following to rc.conf:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ethname&lt;em&gt;enable="YES"
  ethname&lt;/em&gt;devices="em0 ue0 ue1" # Replace with desired devices to rename&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create /usr/local/etc/ifmap in the following format: &lt;mac address="" (in="" lower="" case)=""&gt; &lt;desired name=""&gt;&lt;/desired&gt;&lt;/mac&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;01:23:45:67:89:ab eth0
  01:23:45:67:89:ac eth1&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;That's it. Use ifconfig_&lt;name&gt;="" settings in rc.conf with the new names.&lt;/name&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;I know MFSBSD has something like this, but a polished up hybrid of the two should likely be part of the base system if something is not already available&lt;/li&gt;
&lt;li&gt;This would be a great “Junior Job”, if say, a viewer wanted to get started with their first FreeBSD patch&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3&gt;&lt;a href="https://github.com/witchard/mog"&gt;Mog: A different take on the Unix tool cat&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Do you abuse cat to view files?&lt;/li&gt;
&lt;li&gt;Did you know cat is meant for con&lt;em&gt;cat&lt;/em&gt;enating files, meaning: cat part1 part2 part3 &amp;gt; wholething.txt&lt;/li&gt;
&lt;li&gt;mog is a tool for actually viewing files, and it adds quite a few nice features

&lt;ul&gt;
&lt;li&gt;Syntax highlight scripts&lt;/li&gt;
&lt;li&gt;Print a hex dump of binary files&lt;/li&gt;
&lt;li&gt;Show details of image files&lt;/li&gt;
&lt;li&gt;Perform objdump on executables&lt;/li&gt;
&lt;li&gt;List a directory&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;mog reads the $HOME/.mogrc config file which describes a series of operations it can do in an ordered manner. Each operation has a match command and an action command. For each file you give to mog it will test each match command in turn, when one matches it will perform the action. A reasonably useful config file is generated when you first run it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;h3&gt;&lt;a href="https://utcc.utoronto.ca/~cks/space/blog/unix/HowUnixBackspaces"&gt;How Unix erases things when you type a backspace while entering text&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yesterday I mentioned in passing that printing a DEL character doesn't actually erase anything. This raises an interesting question, because when you're typing something into a Unix system and hit your backspace key, Unix sure erases the last character that you entered. So how is it doing that?&lt;/p&gt;
  
  &lt;p&gt;The answer turns out to be basically what you'd expect, although the actual implementation rapidly gets complex. When you hit backspace, the kernel tty line discipline rubs out your previous character by printing (in the simple case) Ctrl-H, a space, and then another Ctrl-H.&lt;/p&gt;
  
  &lt;p&gt;Of course just backing up one character is not always the correct way of erasing input, and that's when it gets complicated for the kernel. To start with we have tabs, because when you (the user) backspace over a tab you want the cursor to jump all the way back, not just move back one space. The kernel has a certain amount of code to work out what column it thinks you're on and then back up an appropriate number of spaces with Ctrl-Hs.&lt;/p&gt;
  
  &lt;p&gt;Then we have the case when you quoted a control character while entering it, eg by typing Ctrl-V Ctrl-H; this causes the kernel to print the Ctrl-H instead of acting on it, and it prints it as the two character sequence ^H. When you hit backspace to erase that, of course you want both (printed) characters to be rubbed out, not just the 'H'. So the kernel needs to keep track of that and rub out two characters instead of just one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Chris then provides an example, from IllumOS, of the kernel trying to deal with multibyte characters&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;FreeBSD also handles backspacing a space specially, because you don't need to actually rub that out with a '\b \b' sequence; you can just print a plain \b. Other kernels don't seem to bother with this optimization. The FreeBSD code for this is in sys/kern/tty&lt;em&gt;ttydisc.c in the ttydisc&lt;/em&gt;rubchar function&lt;/p&gt;
  
  &lt;p&gt;PS: If you want to see the kernel's handling of backspace in action, you usually can't test it at your shell prompt, because you're almost certainly using a shell that supports command line editing and readline and so on. Command line editing requires taking over input processing from the kernel, and so such shells are handling everything themselves. My usual way to see what the kernel is doing is to run 'cat &amp;gt;/dev/null' and then type away.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;And you thought the backspace key would be simple...&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3&gt;&lt;a href="http://www.freshports.org/graphics/wayland/"&gt;FreeBSD ports now have Wayland&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We’ve discussed the pending Wayland work, but we wanted to point you today to the ports which are in mainline FreeBSD ports tree now.&lt;/li&gt;
&lt;li&gt;First of all, (And I was wondering how they would deal with this) it has landed in the “graphics” category, since Wayland is the Anti-X11, putting it in x11/ didn’t make a lot of sense.&lt;/li&gt;
&lt;li&gt;Couple of notes before you start installing new packages and expecting wayland to “just work”&lt;/li&gt;
&lt;li&gt;First, this does require that you have working DRM from the kernel side. You’ll want to grab TrueOS or build from Matt Macy’s FreeBSD branches on GitHub before testing on any kind of modern Intel GPU. Nvidia with modesetting should be supported.&lt;/li&gt;
&lt;li&gt;Next, not all desktops will “just work”. You may need to grab experimental Weston for compositor. KDE / Gnome (And Lumina) and friends will grow Wayland support in the future, so don’t expect to just fire up $whatever and have it all work out of box.&lt;/li&gt;
&lt;li&gt;Feedback is needed! This is brand new functionality for FreeBSD, and the maintainers will want to hear your results. For us on the TrueOS side we are interested as well, since we want to port Lumina over to Wayland soon(ish)&lt;/li&gt;
&lt;li&gt;Happy Experimenting!&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2&gt;Beastie Bits&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freebsdfoundation.org/blog/faces-of-freebsd-2017-joseph-kong/"&gt;Faces of FreeBSD 2017: Joseph Kong&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://opnsense.org/opnsense-17-1-released/"&gt;OPNsense 17.1  “Eclectic Eagle”, based on FreeBSD 11 Released&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.koszek.com/blog/2017/01/28/why-you-should-start-programming-on-unix/"&gt;Why you should start programming on UNIX&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://eradman.com/posts/opensmtpd-filtering.html"&gt;OpenSMTPD Mail Filtering&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2&gt;Feedback/Questions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pastebin.com/89AyGe5F"&gt; Zane - Databases and Jails&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://pastebin.com/Te8sz9id"&gt; Mohammad - USB Install&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://pastebin.com/G2SzahWL"&gt; Chuck - Updating Jails&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://pastebin.com/71ExJLpL"&gt; David - Lumina / LXQt&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;Send questions, comments, show ideas/topics, or stories you want mentioned on the show to &lt;a href="mailto:feedback@bsdnow.tv"&gt;feedback@bsdnow.tv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
        </content>
    </entry>
</feed>
